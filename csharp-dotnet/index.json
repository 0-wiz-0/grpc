{
  "api/Grpc.Core.SerializationContext.html": {
    "href": "api/Grpc.Core.SerializationContext.html",
    "title": "Class SerializationContext | gRPC for .NET",
    "keywords": "Class SerializationContext Provides storage for payload when serializing a message. Inheritance System.Object SerializationContext Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class SerializationContext : object Methods Complete(Byte[]) Use the byte array as serialized form of current message and mark serialization process as complete. Complete() can only be called once. By calling this method the caller gives up the ownership of the payload which must not be accessed afterwards. Declaration public virtual void Complete(byte[] payload) Parameters Type Name Description System.Byte [] payload the serialized form of current message"
  },
  "api/Grpc.Core.Interceptors.html": {
    "href": "api/Grpc.Core.Interceptors.html",
    "title": "Namespace Grpc.Core.Interceptors | gRPC for .NET",
    "keywords": "Namespace Grpc.Core.Interceptors Classes CallInvokerExtensions Extends the CallInvoker class to provide the interceptor facility on the client side. ChannelExtensions Provides extension methods to make it easy to register interceptors on Channel objects. Interceptor Serves as the base class for gRPC interceptors. Structs ClientInterceptorContext<TRequest, TResponse> Carries along the context associated with intercepted invocations on the client side. Delegates Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous client-streaming invocations. A delegate of this type is passed to the AsyncClientStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous duplex invocations. A delegate of this type is passed to the AsyncDuplexStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous server-streaming invocations. A delegate of this type is passed to the AsyncServerStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple asynchronous invocations. A delegate of this type is passed to the AsyncUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple blocking invocations. A delegate of this type is passed to the BlockingUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate context and request values as it sees fit."
  },
  "api/Grpc.Core.Interceptors.ClientInterceptorContext-2.html": {
    "href": "api/Grpc.Core.Interceptors.ClientInterceptorContext-2.html",
    "title": "Struct ClientInterceptorContext<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Struct ClientInterceptorContext<TRequest, TResponse> Carries along the context associated with intercepted invocations on the client side. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public struct ClientInterceptorContext<TRequest, TResponse> where TRequest : class where TResponse : class Type Parameters Name Description TRequest TResponse Constructors ClientInterceptorContext(Method<TRequest, TResponse>, String, CallOptions) Creates a new instance of ClientInterceptorContext<TRequest, TResponse> with the specified method, host, and call options. Declaration public ClientInterceptorContext(Method<TRequest, TResponse> method, string host, CallOptions options) Parameters Type Name Description Method <TRequest, TResponse> method A Method<TRequest, TResponse> object representing the method to be invoked. System.String host The host to dispatch the current call to. CallOptions options A CallOptions instance containing the call options of the current call. Properties Host Gets the host that the currect invocation will be dispatched to. Declaration public string Host { get; } Property Value Type Description System.String Method Gets the Method<TRequest, TResponse> instance representing the method to be invoked. Declaration public Method<TRequest, TResponse> Method { get; } Property Value Type Description Method <TRequest, TResponse> Options Gets the CallOptions structure representing the call options associated with the current invocation. Declaration public CallOptions Options { get; } Property Value Type Description CallOptions"
  },
  "api/Grpc.Core.DuplexStreamingServerMethod-2.html": {
    "href": "api/Grpc.Core.DuplexStreamingServerMethod-2.html",
    "title": "Delegate DuplexStreamingServerMethod<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate DuplexStreamingServerMethod<TRequest, TResponse> Server-side handler for bidi streaming call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task DuplexStreamingServerMethod<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, IServerStreamWriter<TResponse> responseStream, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream IServerStreamWriter <TResponse> responseStream ServerCallContext context Returns Type Description Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous duplex invocations. A delegate of this type is passed to the AsyncDuplexStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCallContinuation<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> An instance of AsyncDuplexStreamingCall<TRequest, TResponse> representing an asynchronous invocation of a duplex-streaming RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest TResponse"
  },
  "api/Grpc.Core.IClientStreamWriter-1.html": {
    "href": "api/Grpc.Core.IClientStreamWriter-1.html",
    "title": "Interface IClientStreamWriter<T> | gRPC for .NET",
    "keywords": "Interface IClientStreamWriter<T> Client-side writable stream of messages with Close capability. Inherited Members IAsyncStreamWriter<T>.WriteAsync(T) IAsyncStreamWriter<T>.WriteOptions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IClientStreamWriter<T> : IAsyncStreamWriter<T> Type Parameters Name Description T The message type. Methods CompleteAsync() Completes/closes the stream. Can only be called once there is no pending write. No writes should follow calling this. Declaration Task CompleteAsync() Returns Type Description Task"
  },
  "api/Grpc.Core.ClientStreamingServerMethod-2.html": {
    "href": "api/Grpc.Core.ClientStreamingServerMethod-2.html",
    "title": "Delegate ClientStreamingServerMethod<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate ClientStreamingServerMethod<TRequest, TResponse> Server-side handler for client streaming call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task<TResponse> ClientStreamingServerMethod<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream ServerCallContext context Returns Type Description Task <TResponse> Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.AspNetCore.Server.Model.IServiceMethodProvider-1.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.IServiceMethodProvider-1.html",
    "title": "Interface IServiceMethodProvider<TService> | gRPC for .NET",
    "keywords": "Interface IServiceMethodProvider<TService> Defines a contract for specifying methods for TService . Namespace : Grpc.AspNetCore.Server.Model Assembly : Grpc.AspNetCore.Server.dll Syntax public interface IServiceMethodProvider<TService> where TService : class Type Parameters Name Description TService Remarks On application initialization, gRPC invokes all registered instances of IServiceMethodProvider<TService> to perform method discovery. IServiceMethodProvider<TService> instances are invoked in the order they are registered. Methods OnServiceMethodDiscovery(ServiceMethodProviderContext<TService>) Called to execute the provider. Declaration void OnServiceMethodDiscovery(ServiceMethodProviderContext<TService> context) Parameters Type Name Description ServiceMethodProviderContext <TService> context The ServiceMethodProviderContext<TService> ."
  },
  "api/Grpc.Core.ContextPropagationToken.html": {
    "href": "api/Grpc.Core.ContextPropagationToken.html",
    "title": "Class ContextPropagationToken | gRPC for .NET",
    "keywords": "Class ContextPropagationToken Token for propagating context of server side handlers to child calls. In situations when a backend is making calls to another backend, it makes sense to propagate properties like deadline and cancellation token of the server call to the child call. Underlying gRPC implementation may provide other \"opaque\" contexts (like tracing context) that are not explicitly accesible via the public C# API, but this token still allows propagating them. Inheritance System.Object ContextPropagationToken Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ContextPropagationToken : object"
  },
  "api/Grpc.Core.Interceptors.ChannelExtensions.html": {
    "href": "api/Grpc.Core.Interceptors.ChannelExtensions.html",
    "title": "Class ChannelExtensions | gRPC for .NET",
    "keywords": "Class ChannelExtensions Provides extension methods to make it easy to register interceptors on Channel objects. Inheritance System.Object ChannelExtensions Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public static class ChannelExtensions : object Methods Intercept(ChannelBase, Func<Metadata, Metadata>) Returns a CallInvoker instance that intercepts the invoker with the given interceptor. Declaration public static CallInvoker Intercept(this ChannelBase channel, Func<Metadata, Metadata> interceptor) Parameters Type Name Description ChannelBase channel The channel to intercept. Func < Metadata , Metadata > interceptor An interceptor delegate that takes the request metadata to be sent with an outgoing call and returns a Metadata instance that will replace the existing invocation metadata. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by building a chain like \"channel.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(ChannelBase, Interceptor) Returns a CallInvoker instance that intercepts the channel with the given interceptor. Declaration public static CallInvoker Intercept(this ChannelBase channel, Interceptor interceptor) Parameters Type Name Description ChannelBase channel The channel to intercept. Interceptor interceptor The interceptor to intercept the channel with. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"channel.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted channel, effectively building a chain like \"channel.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(ChannelBase, Interceptor[]) Returns a CallInvoker instance that intercepts the channel with the given interceptors. Declaration public static CallInvoker Intercept(this ChannelBase channel, params Interceptor[] interceptors) Parameters Type Name Description ChannelBase channel The channel to intercept. Interceptor [] interceptors An array of interceptors to intercept the channel with. Control is passed to the interceptors in the order specified. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"channel.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted channel, effectively building a chain like \"channel.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control."
  },
  "api/Grpc.Core.ContextPropagationOptions.html": {
    "href": "api/Grpc.Core.ContextPropagationOptions.html",
    "title": "Class ContextPropagationOptions | gRPC for .NET",
    "keywords": "Class ContextPropagationOptions Options for ContextPropagationToken . Inheritance System.Object ContextPropagationOptions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class ContextPropagationOptions : object Constructors ContextPropagationOptions(Boolean, Boolean) Creates new context propagation options. Declaration public ContextPropagationOptions(bool propagateDeadline = true, bool propagateCancellation = true) Parameters Type Name Description System.Boolean propagateDeadline If set to true parent call's deadline will be propagated to the child call. System.Boolean propagateCancellation If set to true parent call's cancellation token will be propagated to the child call. Fields Default The context propagation options that will be used by default. Declaration public static readonly ContextPropagationOptions Default Field Value Type Description ContextPropagationOptions Properties IsPropagateCancellation true if parent call's cancellation token should be propagated to the child call. Declaration public bool IsPropagateCancellation { get; } Property Value Type Description System.Boolean IsPropagateDeadline true if parent call's deadline should be propagated to the child call. Declaration public bool IsPropagateDeadline { get; } Property Value Type Description System.Boolean"
  },
  "api/Grpc.Core.ServerServiceDefinition.Builder.html": {
    "href": "api/Grpc.Core.ServerServiceDefinition.Builder.html",
    "title": "Class ServerServiceDefinition.Builder | gRPC for .NET",
    "keywords": "Class ServerServiceDefinition.Builder Builder class for ServerServiceDefinition . Inheritance System.Object ServerServiceDefinition.Builder Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Builder : object Constructors Builder() Creates a new instance of builder. Declaration public Builder() Methods AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ClientStreamingServerMethod<TRequest, TResponse>) Adds a definition for a client streaming method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ClientStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ClientStreamingServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, DuplexStreamingServerMethod<TRequest, TResponse>) Adds a definition for a bidirectional streaming method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, DuplexStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. DuplexStreamingServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ServerStreamingServerMethod<TRequest, TResponse>) Adds a definition for a server streaming method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ServerStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ServerStreamingServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, UnaryServerMethod<TRequest, TResponse>) Adds a definition for a single request - single response method. Declaration public ServerServiceDefinition.Builder AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, UnaryServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. UnaryServerMethod <TRequest, TResponse> handler The method handler. Returns Type Description ServerServiceDefinition.Builder This builder instance. Type Parameters Name Description TRequest The request message class. TResponse The response message class. Build() Creates an immutable ServerServiceDefinition from this builder. Declaration public ServerServiceDefinition Build() Returns Type Description ServerServiceDefinition The ServerServiceDefinition object."
  },
  "api/Grpc.Core.Metadata.Entry.html": {
    "href": "api/Grpc.Core.Metadata.Entry.html",
    "title": "Class Metadata.Entry | gRPC for .NET",
    "keywords": "Class Metadata.Entry Metadata entry Inheritance System.Object Metadata.Entry Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Entry : object Constructors Entry(String, Byte[]) Initializes a new instance of the Metadata.Entry struct with a binary value. Declaration public Entry(string key, byte[] valueBytes) Parameters Type Name Description System.String key Metadata key. Gets converted to lowercase. Needs to have suffix indicating a binary valued metadata entry. Can only contain lowercase alphanumeric characters, underscores, hyphens and dots. System.Byte [] valueBytes Value bytes. Entry(String, String) Initializes a new instance of the Metadata.Entry struct with an ASCII value. Declaration public Entry(string key, string value) Parameters Type Name Description System.String key Metadata key. Gets converted to lowercase. Must not use suffix indicating a binary valued metadata entry. Can only contain lowercase alphanumeric characters, underscores, hyphens and dots. System.String value Value string. Only ASCII characters are allowed. Properties IsBinary Returns true if this entry is a binary-value entry. Declaration public bool IsBinary { get; } Property Value Type Description System.Boolean Key Gets the metadata entry key. Declaration public string Key { get; } Property Value Type Description System.String Value Gets the string value of this metadata entry. Declaration public string Value { get; } Property Value Type Description System.String ValueBytes Gets the binary value of this metadata entry. Declaration public byte[] ValueBytes { get; } Property Value Type Description System.Byte [] Methods ToString() Returns a that represents the current Metadata.Entry . Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Grpc.Core.Marshallers.html": {
    "href": "api/Grpc.Core.Marshallers.html",
    "title": "Class Marshallers | gRPC for .NET",
    "keywords": "Class Marshallers Utilities for creating marshallers. Inheritance System.Object Marshallers Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public static class Marshallers : object Properties StringMarshaller Returns a marshaller for string type. This is useful for testing. Declaration public static Marshaller<string> StringMarshaller { get; } Property Value Type Description Marshaller < System.String > Methods Create<T>(Action<T, SerializationContext>, Func<DeserializationContext, T>) Creates a marshaller from specified contextual serializer and deserializer. Note: This method is part of an experimental API that can change or be removed without any prior notice. Declaration public static Marshaller<T> Create<T>(Action<T, SerializationContext> serializer, Func<DeserializationContext, T> deserializer) Parameters Type Name Description Action <T, SerializationContext > serializer Func < DeserializationContext , T> deserializer Returns Type Description Marshaller <T> Type Parameters Name Description T Create<T>(Func<T, Byte[]>, Func<Byte[], T>) Creates a marshaller from specified serializer and deserializer. Declaration public static Marshaller<T> Create<T>(Func<T, byte[]> serializer, Func<byte[], T> deserializer) Parameters Type Name Description Func <T, System.Byte []> serializer Func < System.Byte [], T> deserializer Returns Type Description Marshaller <T> Type Parameters Name Description T"
  },
  "api/Grpc.Core.AsyncServerStreamingCall-1.html": {
    "href": "api/Grpc.Core.AsyncServerStreamingCall-1.html",
    "title": "Class AsyncServerStreamingCall<TResponse> | gRPC for .NET",
    "keywords": "Class AsyncServerStreamingCall<TResponse> Return type for server streaming calls. Inheritance IDisposable AsyncServerStreamingCall<TResponse> Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncServerStreamingCall<TResponse> : IDisposable Type Parameters Name Description TResponse Response message type for this call. Constructors AsyncServerStreamingCall(IAsyncStreamReader<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncDuplexStreamingCall object with the specified properties. Declaration public AsyncServerStreamingCall(IAsyncStreamReader<TResponse> responseStream, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IAsyncStreamReader <TResponse> responseStream Stream of response values. Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. Func < Status > getStatusFunc Delegate returning the status of the call. Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description Task < Metadata > ResponseStream Async stream to read streaming responses. Declaration public IAsyncStreamReader<TResponse> ResponseStream { get; } Property Value Type Description IAsyncStreamReader <TResponse> Methods Dispose() Provides means to cleanup after the call. If the call has already finished normally (response stream has been fully read), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata"
  },
  "api/Grpc.AspNetCore.Server.Model.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.html",
    "title": "Namespace Grpc.AspNetCore.Server.Model | gRPC for .NET",
    "keywords": "Namespace Grpc.AspNetCore.Server.Model Classes ServiceMethodProviderContext<TService> A context for IServiceMethodProvider<TService> . Interfaces IServiceMethodProvider<TService> Defines a contract for specifying methods for TService . Delegates ClientStreamingServerMethod<TService, TRequest, TResponse> Server-side handler for a client streaming call. DuplexStreamingServerMethod<TService, TRequest, TResponse> Server-side handler for a duplex streaming call. ServerStreamingServerMethod<TService, TRequest, TResponse> Server-side handler for a server streaming call. UnaryServerMethod<TService, TRequest, TResponse> Server-side handler for a unary call."
  },
  "api/Grpc.Core.ClientBase-1.html": {
    "href": "api/Grpc.Core.ClientBase-1.html",
    "title": "Class ClientBase<T> | gRPC for .NET",
    "keywords": "Class ClientBase<T> Generic base class for client-side stubs. Inheritance System.Object ClientBase ClientBase<T> Inherited Members ClientBase.CallInvoker Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ClientBase<T> : ClientBase where T : ClientBase<T> Type Parameters Name Description T Constructors ClientBase() Initializes a new instance of ClientBase class that throws NotImplementedException upon invocation of any RPC. This constructor is only provided to allow creation of test doubles for client classes (e.g. mocking requires a parameterless constructor). Declaration protected ClientBase() ClientBase(CallInvoker) Initializes a new instance of ClientBase class. Declaration public ClientBase(CallInvoker callInvoker) Parameters Type Name Description CallInvoker callInvoker The CallInvoker for remote call invocation. ClientBase(ChannelBase) Initializes a new instance of ClientBase class. Declaration public ClientBase(ChannelBase channel) Parameters Type Name Description ChannelBase channel The channel to use for remote call invocation. ClientBase(ClientBase.ClientBaseConfiguration) Initializes a new instance of ClientBase class. Declaration protected ClientBase(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration The configuration. Methods NewInstance(ClientBase.ClientBaseConfiguration) Creates a new instance of client from given ClientBaseConfiguration . Declaration protected abstract T NewInstance(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration Returns Type Description T WithHost(String) Creates a new client that sets host field for calls explicitly. gRPC supports multiple \"hosts\" being served by a single server. By default (if a client was not created by calling this method), host null with the meaning \"use default host\" is used. Declaration public T WithHost(string host) Parameters Type Name Description System.String host Returns Type Description T"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | gRPC for .NET",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes GrpcClientServiceExtensions Extensions methods to configure an for with gRPC. GrpcHttpClientBuilderExtensions Extension methods for configuring an . GrpcReflectionServiceExtensions Extension methods for the gRPC reflection services. GrpcServerHttpClientBuilderExtensions Extension methods for configuring an . GrpcServicesExtensions Extension methods for the gRPC services."
  },
  "api/Microsoft.Extensions.DependencyInjection.GrpcServicesExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.GrpcServicesExtensions.html",
    "title": "Class GrpcServicesExtensions | gRPC for .NET",
    "keywords": "Class GrpcServicesExtensions Extension methods for the gRPC services. Inheritance System.Object GrpcServicesExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Grpc.AspNetCore.Server.dll Syntax public static class GrpcServicesExtensions : object Methods AddGrpc(IServiceCollection) Adds gRPC services to the specified . Declaration public static IGrpcServerBuilder AddGrpc(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The for adding services. Returns Type Description IGrpcServerBuilder An IGrpcServerBuilder that can be used to further configure the gRPC services. AddGrpc(IServiceCollection, Action<GrpcServiceOptions>) Adds gRPC services to the specified . Declaration public static IGrpcServerBuilder AddGrpc(this IServiceCollection services, Action<GrpcServiceOptions> configureOptions) Parameters Type Name Description IServiceCollection services The for adding services. Action < GrpcServiceOptions > configureOptions An to configure the provided GrpcServiceOptions . Returns Type Description IGrpcServerBuilder An IGrpcServerBuilder that can be used to further configure the gRPC services. AddServiceOptions<TService>(IGrpcServerBuilder, Action<GrpcServiceOptions<TService>>) Adds service specific options to an IGrpcServerBuilder . Declaration public static IGrpcServerBuilder AddServiceOptions<TService>(this IGrpcServerBuilder grpcBuilder, Action<GrpcServiceOptions<TService>> configure) where TService : class Parameters Type Name Description IGrpcServerBuilder grpcBuilder The IGrpcServerBuilder . Action < GrpcServiceOptions <TService>> configure A callback to configure the service options. Returns Type Description IGrpcServerBuilder The same instance of the IGrpcServerBuilder for chaining. Type Parameters Name Description TService The service type to configure."
  },
  "api/Microsoft.AspNetCore.Builder.GrpcReflectionEndpointRouteBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.GrpcReflectionEndpointRouteBuilderExtensions.html",
    "title": "Class GrpcReflectionEndpointRouteBuilderExtensions | gRPC for .NET",
    "keywords": "Class GrpcReflectionEndpointRouteBuilderExtensions Provides extension methods for to add gRPC service endpoints. Inheritance System.Object GrpcReflectionEndpointRouteBuilderExtensions Namespace : Microsoft.AspNetCore.Builder Assembly : Grpc.AspNetCore.Server.Reflection.dll Syntax public static class GrpcReflectionEndpointRouteBuilderExtensions : object Methods MapGrpcReflectionService(IEndpointRouteBuilder) Maps incoming requests to the gRPC reflection service. This service can be queried to discover the gRPC services on the server. Declaration public static IEndpointConventionBuilder MapGrpcReflectionService(this IEndpointRouteBuilder builder) Parameters Type Name Description IEndpointRouteBuilder builder The to add the route to. Returns Type Description IEndpointConventionBuilder An for endpoints associated with the service."
  },
  "api/Grpc.Core.WriteFlags.html": {
    "href": "api/Grpc.Core.WriteFlags.html",
    "title": "Enum WriteFlags | gRPC for .NET",
    "keywords": "Enum WriteFlags Flags for write operations. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public enum WriteFlags : int Fields Name Description BufferHint Hint that the write may be buffered and need not go out on the wire immediately. gRPC is free to buffer the message until the next non-buffered write, or until write stream completion, but it need not buffer completely or at all. NoCompress Force compression to be disabled for a particular write."
  },
  "api/Grpc.Core.VersionInfo.html": {
    "href": "api/Grpc.Core.VersionInfo.html",
    "title": "Class VersionInfo | gRPC for .NET",
    "keywords": "Class VersionInfo Provides info about current version of gRPC. See https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/ for rationale about assembly versioning. Inheritance System.Object VersionInfo Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public static class VersionInfo : object Fields CurrentAssemblyFileVersion Current AssemblyFileVersion of gRPC C# assemblies Declaration public const string CurrentAssemblyFileVersion = null Field Value Type Description System.String CurrentAssemblyVersion Current AssemblyVersion attribute of gRPC C# assemblies Declaration public const string CurrentAssemblyVersion = null Field Value Type Description System.String CurrentVersion Current version of gRPC C# Declaration public const string CurrentVersion = null Field Value Type Description System.String"
  },
  "api/Grpc.Net.Compression.GzipCompressionProvider.html": {
    "href": "api/Grpc.Net.Compression.GzipCompressionProvider.html",
    "title": "Class GzipCompressionProvider | gRPC for .NET",
    "keywords": "Class GzipCompressionProvider GZIP compression provider. Inheritance System.Object GzipCompressionProvider Implements ICompressionProvider Namespace : Grpc.Net.Compression Assembly : Grpc.Net.Common.dll Syntax public class GzipCompressionProvider : object, ICompressionProvider Constructors GzipCompressionProvider(CompressionLevel) Initializes a new instance of the GzipCompressionProvider class with the specified . Declaration public GzipCompressionProvider(CompressionLevel defaultCompressionLevel) Parameters Type Name Description CompressionLevel defaultCompressionLevel The default compression level to use when compressing data. Properties EncodingName The encoding name used in the 'grpc-encoding' and 'grpc-accept-encoding' request and response headers. Declaration public string EncodingName { get; } Property Value Type Description System.String Methods CreateCompressionStream(Stream, Nullable<CompressionLevel>) Create a new compression stream. Declaration public Stream CreateCompressionStream(Stream stream, CompressionLevel? compressionLevel) Parameters Type Name Description Stream stream The stream that compressed data is written to. System.Nullable < CompressionLevel > compressionLevel The compression level. Returns Type Description Stream A stream used to compress data. CreateDecompressionStream(Stream) Create a new decompression stream. Declaration public Stream CreateDecompressionStream(Stream stream) Parameters Type Name Description Stream stream The stream that compressed data is copied from. Returns Type Description Stream A stream used to decompress data. Implements ICompressionProvider"
  },
  "api/Grpc.Core.CallInvoker.html": {
    "href": "api/Grpc.Core.CallInvoker.html",
    "title": "Class CallInvoker | gRPC for .NET",
    "keywords": "Class CallInvoker Abstraction of client-side RPC invocation. Inheritance System.Object CallInvoker Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class CallInvoker : object Methods AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions) Invokes a client streaming call asynchronously. In client streaming scenario, client sends a stream of requests and server responds with a single response. Declaration public abstract AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions) Invokes a duplex streaming call asynchronously. In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses. The response stream is completely independent and both side can be sending messages at the same time. Declaration public abstract AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> Type Parameters Name Description TRequest TResponse AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest) Invokes a server streaming call asynchronously. In server streaming scenario, client sends on request and server responds with a stream of responses. Declaration public abstract AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options TRequest request Returns Type Description AsyncServerStreamingCall <TResponse> Type Parameters Name Description TRequest TResponse AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest) Invokes a simple remote call asynchronously. Declaration public abstract AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options TRequest request Returns Type Description AsyncUnaryCall <TResponse> Type Parameters Name Description TRequest TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse>, String, CallOptions, TRequest) Invokes a simple remote call in a blocking fashion. Declaration public abstract TResponse BlockingUnaryCall<TRequest, TResponse>(Method<TRequest, TResponse> method, string host, CallOptions options, TRequest request) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method System.String host CallOptions options TRequest request Returns Type Description TResponse Type Parameters Name Description TRequest TResponse Extension Methods CallInvokerExtensions.Intercept(CallInvoker, Interceptor) CallInvokerExtensions.Intercept(CallInvoker, Interceptor[]) CallInvokerExtensions.Intercept(CallInvoker, Func<Metadata, Metadata>)"
  },
  "api/Grpc.Core.Utils.html": {
    "href": "api/Grpc.Core.Utils.html",
    "title": "Namespace Grpc.Core.Utils | gRPC for .NET",
    "keywords": "Namespace Grpc.Core.Utils Classes GrpcPreconditions Utility methods to simplify checking preconditions in the code."
  },
  "api/Grpc.Core.AsyncUnaryCall-1.html": {
    "href": "api/Grpc.Core.AsyncUnaryCall-1.html",
    "title": "Class AsyncUnaryCall<TResponse> | gRPC for .NET",
    "keywords": "Class AsyncUnaryCall<TResponse> Return type for single request - single response call. Inheritance IDisposable AsyncUnaryCall<TResponse> Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncUnaryCall<TResponse> : IDisposable Type Parameters Name Description TResponse Response message type for this call. Constructors AsyncUnaryCall(Task<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncUnaryCall object with the specified properties. Declaration public AsyncUnaryCall(Task<TResponse> responseAsync, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description Task <TResponse> responseAsync The response of the asynchronous call. Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. Func < Status > getStatusFunc Delegate returning the status of the call. Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties ResponseAsync Asynchronous call result. Declaration public Task<TResponse> ResponseAsync { get; } Property Value Type Description Task <TResponse> ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description Task < Metadata > Methods Dispose() Provides means to cleanup after the call. If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetAwaiter() Allows awaiting this object directly. Declaration public TaskAwaiter<TResponse> GetAwaiter() Returns Type Description TaskAwaiter <TResponse> GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata"
  },
  "api/Grpc.Core.SslCredentials.html": {
    "href": "api/Grpc.Core.SslCredentials.html",
    "title": "Class SslCredentials | gRPC for .NET",
    "keywords": "Class SslCredentials Client-side SSL credentials. Inheritance System.Object ChannelCredentials SslCredentials Inherited Members ChannelCredentials.Insecure ChannelCredentials.Create(ChannelCredentials, CallCredentials) Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class SslCredentials : ChannelCredentials Constructors SslCredentials() Creates client-side SSL credentials loaded from disk file pointed to by the GRPC_DEFAULT_SSL_ROOTS_FILE_PATH environment variable. If that fails, gets the roots certificates from a well known place on disk. Declaration public SslCredentials() SslCredentials(String) Creates client-side SSL credentials from a string containing PEM encoded root certificates. Declaration public SslCredentials(string rootCertificates) Parameters Type Name Description System.String rootCertificates SslCredentials(String, KeyCertificatePair) Creates client-side SSL credentials. Declaration public SslCredentials(string rootCertificates, KeyCertificatePair keyCertificatePair) Parameters Type Name Description System.String rootCertificates string containing PEM encoded server root certificates. KeyCertificatePair keyCertificatePair a key certificate pair. SslCredentials(String, KeyCertificatePair, VerifyPeerCallback) Creates client-side SSL credentials. Declaration public SslCredentials(string rootCertificates, KeyCertificatePair keyCertificatePair, VerifyPeerCallback verifyPeerCallback) Parameters Type Name Description System.String rootCertificates string containing PEM encoded server root certificates. KeyCertificatePair keyCertificatePair a key certificate pair. VerifyPeerCallback verifyPeerCallback a callback to verify peer's target name and certificate. Properties KeyCertificatePair Client side key and certificate pair. If null, client will not use key and certificate pair. Declaration public KeyCertificatePair KeyCertificatePair { get; } Property Value Type Description KeyCertificatePair RootCertificates PEM encoding of the server root certificates. Declaration public string RootCertificates { get; } Property Value Type Description System.String Methods InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase, Object) Populates channel credentials configurator with this instance's configuration. End users never need to invoke this method as it is part of internal implementation. Declaration public override void InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase configurator, object state) Parameters Type Name Description ChannelCredentialsConfiguratorBase configurator System.Object state Overrides ChannelCredentials.InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase, Object)"
  },
  "api/Grpc.AspNetCore.Server.Model.UnaryServerMethod-3.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.UnaryServerMethod-3.html",
    "title": "Delegate UnaryServerMethod<TService, TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate UnaryServerMethod<TService, TRequest, TResponse> Server-side handler for a unary call. Namespace : Grpc.AspNetCore.Server.Model Assembly : Grpc.AspNetCore.Server.dll Syntax public delegate Task<TResponse> UnaryServerMethod<TService, TRequest, TResponse>(TService service, TRequest request, ServerCallContext serverCallContext); Parameters Type Name Description TService service The service instance. TRequest request The request message. ServerCallContext serverCallContext The for the call. Returns Type Description Task <TResponse> A task that represents the completion of the call. The property returns a TResponse for the call response. Type Parameters Name Description TService Service type for this method. TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.AspNetCore.Server.InterceptorCollection.html": {
    "href": "api/Grpc.AspNetCore.Server.InterceptorCollection.html",
    "title": "Class InterceptorCollection | gRPC for .NET",
    "keywords": "Class InterceptorCollection Represents the pipeline of interceptors to be invoked when processing a gRPC call. Inheritance Collection < InterceptorRegistration > InterceptorCollection Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public class InterceptorCollection : Collection<InterceptorRegistration> Methods Add(Type, Object[]) Add an interceptor to the end of the pipeline. Declaration public void Add(Type interceptorType, params object[] args) Parameters Type Name Description Type interceptorType The interceptor type. System.Object [] args The list of arguments to pass to the interceptor constructor when creating an instance. Add<TInterceptor>(Object[]) Add an interceptor to the end of the pipeline. Declaration public void Add<TInterceptor>(params object[] args) where TInterceptor : Interceptor Parameters Type Name Description System.Object [] args The list of arguments to pass to the interceptor constructor when creating an instance. Type Parameters Name Description TInterceptor The interceptor type."
  },
  "api/Grpc.Core.StatusCode.html": {
    "href": "api/Grpc.Core.StatusCode.html",
    "title": "Enum StatusCode | gRPC for .NET",
    "keywords": "Enum StatusCode Result of a remote procedure call. Based on grpc_status_code from grpc/status.h Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public enum StatusCode : int Fields Name Description Aborted The operation was aborted, typically due to a concurrency issue like sequencer check failures, transaction aborts, etc. AlreadyExists Some entity that we attempted to create (e.g., file or directory) already exists. Cancelled The operation was cancelled (typically by the caller). DataLoss Unrecoverable data loss or corruption. DeadlineExceeded Deadline expired before operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. FailedPrecondition Operation was rejected because the system is not in a state required for the operation's execution. For example, directory to be deleted may be non-empty, an rmdir operation is applied to a non-directory, etc. Internal Internal errors. Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken. InvalidArgument Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). NotFound Some requested entity (e.g., file or directory) was not found. OK Not an error; returned on success. OutOfRange Operation was attempted past the valid range. E.g., seeking or reading past end of file. PermissionDenied The caller does not have permission to execute the specified operation. PERMISSION_DENIED must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED instead for those errors). PERMISSION_DENIED must not be used if the caller can not be identified (use UNAUTHENTICATED instead for those errors). ResourceExhausted Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. Unauthenticated The request does not have valid authentication credentials for the operation. Unavailable The service is currently unavailable. This is a most likely a transient condition and may be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. Unimplemented Operation is not implemented or not supported/enabled in this service. Unknown Unknown error. An example of where this error may be returned is if a Status value received from another address space belongs to an error-space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error."
  },
  "api/Grpc.AspNetCore.Server.html": {
    "href": "api/Grpc.AspNetCore.Server.html",
    "title": "Namespace Grpc.AspNetCore.Server | gRPC for .NET",
    "keywords": "Namespace Grpc.AspNetCore.Server Classes GrpcMethodMetadata Metadata for a gRPC method endpoint. GrpcServiceOptions Options used to configure service instances. GrpcServiceOptions<TService> Options used to configure the specified service type instances. These options override globally set options. InterceptorCollection Represents the pipeline of interceptors to be invoked when processing a gRPC call. InterceptorRegistration Representation of a registration of the interceptor in the pipeline. Interfaces IGrpcServerBuilder A builder abstraction for configuring gRPC servers. IServerCallContextFeature Provides access to the gRPC server call context for the current HTTP request."
  },
  "api/Grpc.AspNetCore.Server.IGrpcServerBuilder.html": {
    "href": "api/Grpc.AspNetCore.Server.IGrpcServerBuilder.html",
    "title": "Interface IGrpcServerBuilder | gRPC for .NET",
    "keywords": "Interface IGrpcServerBuilder A builder abstraction for configuring gRPC servers. Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public interface IGrpcServerBuilder Properties Services Gets the builder service collection. Declaration IServiceCollection Services { get; } Property Value Type Description IServiceCollection Extension Methods GrpcServicesExtensions.AddServiceOptions<TService>(IGrpcServerBuilder, Action<GrpcServiceOptions<TService>>)"
  },
  "api/Grpc.Net.Client.html": {
    "href": "api/Grpc.Net.Client.html",
    "title": "Namespace Grpc.Net.Client | gRPC for .NET",
    "keywords": "Namespace Grpc.Net.Client Classes GrpcChannel Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers. Client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking a remote call so in general you should reuse a single channel for as many calls as possible. GrpcChannelOptions An options class for configuring a GrpcChannel ."
  },
  "api/Grpc.Net.Client.GrpcChannelOptions.html": {
    "href": "api/Grpc.Net.Client.GrpcChannelOptions.html",
    "title": "Class GrpcChannelOptions | gRPC for .NET",
    "keywords": "Class GrpcChannelOptions An options class for configuring a GrpcChannel . Inheritance System.Object GrpcChannelOptions Namespace : Grpc.Net.Client Assembly : Grpc.Net.Client.dll Syntax public sealed class GrpcChannelOptions : object Constructors GrpcChannelOptions() Initializes a new instance of the GrpcChannelOptions class. Declaration public GrpcChannelOptions() Properties CompressionProviders Gets or sets a collection of compression providers. Declaration public IList<ICompressionProvider>? CompressionProviders { get; set; } Property Value Type Description System.Nullable < IList < ICompressionProvider >> Credentials Gets or sets the credentials for the channel. Declaration public ChannelCredentials? Credentials { get; set; } Property Value Type Description System.Nullable < ChannelCredentials > DisposeHttpClient Gets or sets a value indicating whether the underlying should be disposed when the GrpcChannel instance is disposed. The default value is false . Declaration public bool DisposeHttpClient { get; set; } Property Value Type Description System.Boolean Remarks This setting is used when a HttpClient value is specified. If no HttpClient value is provided then the channel will create an instance that is always disposed when the channel is disposed. HttpClient Gets or sets the HttpClient used by the channel. Declaration public HttpClient? HttpClient { get; set; } Property Value Type Description System.Nullable < HttpClient > Remarks By default a specified here will not be disposed with the channel. To dispose the with the channel you must set DisposeHttpClient to true . LoggerFactory Gets or sets the logger factory used by the channel. Declaration public ILoggerFactory? LoggerFactory { get; set; } Property Value Type Description System.Nullable < ILoggerFactory > MaxReceiveMessageSize Gets or sets the maximum message size in bytes that can be received by the client. Declaration public int? MaxReceiveMessageSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > MaxSendMessageSize Gets or sets the maximum message size in bytes that can be sent from the client. Declaration public int? MaxSendMessageSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > ThrowOperationCanceledOnCancellation Gets or sets a value indicating whether clients will throw for a call when its is triggered or its is exceeded. The default value is false . Note: experimental API that can change or be removed without any prior notice. Declaration public bool ThrowOperationCanceledOnCancellation { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Grpc.AspNetCore.Server.InterceptorRegistration.html": {
    "href": "api/Grpc.AspNetCore.Server.InterceptorRegistration.html",
    "title": "Class InterceptorRegistration | gRPC for .NET",
    "keywords": "Class InterceptorRegistration Representation of a registration of the interceptor in the pipeline. Inheritance System.Object InterceptorRegistration Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public class InterceptorRegistration : object Properties Arguments Get the arguments used to create the interceptor. Declaration public IReadOnlyList<object> Arguments { get; } Property Value Type Description IReadOnlyList < System.Object > Type Get the type of the interceptor. Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/Microsoft.Extensions.DependencyInjection.GrpcHttpClientBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.GrpcHttpClientBuilderExtensions.html",
    "title": "Class GrpcHttpClientBuilderExtensions | gRPC for .NET",
    "keywords": "Class GrpcHttpClientBuilderExtensions Extension methods for configuring an . Inheritance System.Object GrpcHttpClientBuilderExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Grpc.Net.ClientFactory.dll Syntax public static class GrpcHttpClientBuilderExtensions : object Methods AddInterceptor(IHttpClientBuilder, Func<Interceptor>) Adds a delegate that will be used to create an additional inteceptor for a gRPC client. Declaration public static IHttpClientBuilder AddInterceptor(this IHttpClientBuilder builder, Func<Interceptor> configureInvoker) Parameters Type Name Description IHttpClientBuilder builder The . Func < Interceptor > configureInvoker A delegate that is used to create an . Returns Type Description IHttpClientBuilder An that can be used to configure the client. AddInterceptor(IHttpClientBuilder, Func<IServiceProvider, Interceptor>) Adds a delegate that will be used to create an additional inteceptor for a gRPC client. Declaration public static IHttpClientBuilder AddInterceptor(this IHttpClientBuilder builder, Func<IServiceProvider, Interceptor> configureInvoker) Parameters Type Name Description IHttpClientBuilder builder The . Func < IServiceProvider , Interceptor > configureInvoker A delegate that is used to create an . Returns Type Description IHttpClientBuilder An that can be used to configure the client. AddInterceptor<TInterceptor>(IHttpClientBuilder) Adds an additional interceptor from the dependency injection container for a gRPC client. Declaration public static IHttpClientBuilder AddInterceptor<TInterceptor>(this IHttpClientBuilder builder) where TInterceptor : Interceptor Parameters Type Name Description IHttpClientBuilder builder The . Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TInterceptor The type of the . ConfigureChannel(IHttpClientBuilder, Action<GrpcChannelOptions>) Adds a delegate that will be used to configure the channel for a gRPC client. Declaration public static IHttpClientBuilder ConfigureChannel(this IHttpClientBuilder builder, Action<GrpcChannelOptions> configureChannel) Parameters Type Name Description IHttpClientBuilder builder The . Action < GrpcChannelOptions > configureChannel A delegate that is used to configure a GrpcChannelOptions . Returns Type Description IHttpClientBuilder An that can be used to configure the client. ConfigureChannel(IHttpClientBuilder, Action<IServiceProvider, GrpcChannelOptions>) Adds a delegate that will be used to configure the channel for a gRPC client. Declaration public static IHttpClientBuilder ConfigureChannel(this IHttpClientBuilder builder, Action<IServiceProvider, GrpcChannelOptions> configureChannel) Parameters Type Name Description IHttpClientBuilder builder The . Action < IServiceProvider , GrpcChannelOptions > configureChannel A delegate that is used to configure a GrpcChannelOptions . Returns Type Description IHttpClientBuilder An that can be used to configure the client."
  },
  "api/Grpc.Core.Method-2.html": {
    "href": "api/Grpc.Core.Method-2.html",
    "title": "Class Method<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Class Method<TRequest, TResponse> A description of a remote method. Inheritance System.Object Method<TRequest, TResponse> Implements IMethod Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Method<TRequest, TResponse> : object, IMethod Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. Constructors Method(MethodType, String, String, Marshaller<TRequest>, Marshaller<TResponse>) Initializes a new instance of the Method class. Declaration public Method(MethodType type, string serviceName, string name, Marshaller<TRequest> requestMarshaller, Marshaller<TResponse> responseMarshaller) Parameters Type Name Description MethodType type Type of method. System.String serviceName Name of service this method belongs to. System.String name Unqualified name of the method. Marshaller <TRequest> requestMarshaller Marshaller used for request messages. Marshaller <TResponse> responseMarshaller Marshaller used for response messages. Properties FullName Gets the fully qualified name of the method. On the server side, methods are dispatched based on this name. Declaration public string FullName { get; } Property Value Type Description System.String Name Gets the unqualified name of the method. Declaration public string Name { get; } Property Value Type Description System.String RequestMarshaller Gets the marshaller used for request messages. Declaration public Marshaller<TRequest> RequestMarshaller { get; } Property Value Type Description Marshaller <TRequest> ResponseMarshaller Gets the marshaller used for response messages. Declaration public Marshaller<TResponse> ResponseMarshaller { get; } Property Value Type Description Marshaller <TResponse> ServiceName Gets the name of the service to which this method belongs. Declaration public string ServiceName { get; } Property Value Type Description System.String Type Gets the type of the method. Declaration public MethodType Type { get; } Property Value Type Description MethodType Implements IMethod"
  },
  "api/Grpc.Core.Status.html": {
    "href": "api/Grpc.Core.Status.html",
    "title": "Struct Status | gRPC for .NET",
    "keywords": "Struct Status Represents RPC result, which consists of StatusCode and an optional detail string. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public struct Status Constructors Status(StatusCode, String) Creates a new instance of Status . Declaration public Status(StatusCode statusCode, string detail) Parameters Type Name Description StatusCode statusCode Status code. System.String detail Detail. Fields DefaultCancelled Default result of a cancelled RPC. StatusCode=Cancelled, empty details message. Declaration public static readonly Status DefaultCancelled Field Value Type Description Status DefaultSuccess Default result of a successful RPC. StatusCode=OK, empty details message. Declaration public static readonly Status DefaultSuccess Field Value Type Description Status Properties Detail Gets the detail. Declaration public string Detail { get; } Property Value Type Description System.String StatusCode Gets the gRPC status code. OK indicates success, all other values indicate an error. Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode Methods ToString() Returns a that represents the current Status . Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/Grpc.Core.AuthInterceptorContext.html": {
    "href": "api/Grpc.Core.AuthInterceptorContext.html",
    "title": "Class AuthInterceptorContext | gRPC for .NET",
    "keywords": "Class AuthInterceptorContext Context for an RPC being intercepted by AsyncAuthInterceptor . Inheritance System.Object AuthInterceptorContext Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class AuthInterceptorContext : object Constructors AuthInterceptorContext(String, String) Initializes a new instance of AuthInterceptorContext . Declaration public AuthInterceptorContext(string serviceUrl, string methodName) Parameters Type Name Description System.String serviceUrl System.String methodName Properties MethodName The method name of the RPC being called. Declaration public string MethodName { get; } Property Value Type Description System.String ServiceUrl The fully qualified service URL for the RPC being called. Declaration public string ServiceUrl { get; } Property Value Type Description System.String"
  },
  "api/Grpc.Core.AsyncClientStreamingCall-2.html": {
    "href": "api/Grpc.Core.AsyncClientStreamingCall-2.html",
    "title": "Class AsyncClientStreamingCall<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Class AsyncClientStreamingCall<TRequest, TResponse> Return type for client streaming calls. Inheritance IDisposable AsyncClientStreamingCall<TRequest, TResponse> Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncClientStreamingCall<TRequest, TResponse> : IDisposable Type Parameters Name Description TRequest Request message type for this call. TResponse Response message type for this call. Constructors AsyncClientStreamingCall(IClientStreamWriter<TRequest>, Task<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncClientStreamingCall object with the specified properties. Declaration public AsyncClientStreamingCall(IClientStreamWriter<TRequest> requestStream, Task<TResponse> responseAsync, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream Stream of request values. Task <TResponse> responseAsync The response of the asynchronous call. Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. Func < Status > getStatusFunc Delegate returning the status of the call. Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties RequestStream Async stream to send streaming requests. Declaration public IClientStreamWriter<TRequest> RequestStream { get; } Property Value Type Description IClientStreamWriter <TRequest> ResponseAsync Asynchronous call result. Declaration public Task<TResponse> ResponseAsync { get; } Property Value Type Description Task <TResponse> ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description Task < Metadata > Methods Dispose() Provides means to cleanup after the call. If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetAwaiter() Allows awaiting this object directly. Declaration public TaskAwaiter<TResponse> GetAwaiter() Returns Type Description TaskAwaiter <TResponse> GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata"
  },
  "api/Grpc.Net.ClientFactory.html": {
    "href": "api/Grpc.Net.ClientFactory.html",
    "title": "Namespace Grpc.Net.ClientFactory | gRPC for .NET",
    "keywords": "Namespace Grpc.Net.ClientFactory Classes GrpcClientFactory A factory abstraction for a component that can create gRPC client instances with custom configuration for a given logical name. GrpcClientFactoryOptions Options used to configure a gRPC client."
  },
  "api/Grpc.Core.WriteOptions.html": {
    "href": "api/Grpc.Core.WriteOptions.html",
    "title": "Class WriteOptions | gRPC for .NET",
    "keywords": "Class WriteOptions Options for write operations. Inheritance System.Object WriteOptions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class WriteOptions : object Constructors WriteOptions(WriteFlags) Initializes a new instance of WriteOptions class. Declaration public WriteOptions(WriteFlags flags = (WriteFlags)0) Parameters Type Name Description WriteFlags flags The write flags. Fields Default Default write options. Declaration public static readonly WriteOptions Default Field Value Type Description WriteOptions Properties Flags Gets the write flags. Declaration public WriteFlags Flags { get; } Property Value Type Description WriteFlags"
  },
  "api/Grpc.Net.Compression.ICompressionProvider.html": {
    "href": "api/Grpc.Net.Compression.ICompressionProvider.html",
    "title": "Interface ICompressionProvider | gRPC for .NET",
    "keywords": "Interface ICompressionProvider Provides a specific compression implementation to compress gRPC messages. Namespace : Grpc.Net.Compression Assembly : Grpc.Net.Common.dll Syntax public interface ICompressionProvider Properties EncodingName The encoding name used in the 'grpc-encoding' and 'grpc-accept-encoding' request and response headers. Declaration string EncodingName { get; } Property Value Type Description System.String Methods CreateCompressionStream(Stream, Nullable<CompressionLevel>) Create a new compression stream. Declaration Stream CreateCompressionStream(Stream stream, CompressionLevel? compressionLevel) Parameters Type Name Description Stream stream The stream that compressed data is written to. System.Nullable < CompressionLevel > compressionLevel The compression level. Returns Type Description Stream A stream used to compress data. CreateDecompressionStream(Stream) Create a new decompression stream. Declaration Stream CreateDecompressionStream(Stream stream) Parameters Type Name Description Stream stream The stream that compressed data is copied from. Returns Type Description Stream A stream used to decompress data."
  },
  "api/Grpc.Core.Marshaller-1.html": {
    "href": "api/Grpc.Core.Marshaller-1.html",
    "title": "Class Marshaller<T> | gRPC for .NET",
    "keywords": "Class Marshaller<T> Encapsulates the logic for serializing and deserializing messages. Inheritance System.Object Marshaller<T> Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class Marshaller<T> : object Type Parameters Name Description T Constructors Marshaller(Action<T, SerializationContext>, Func<DeserializationContext, T>) Initializes a new marshaller from serialize/deserialize fuctions that can access serialization and deserialization context. Compared to the simple serializer/deserializer functions, using the contextual version provides more flexibility and can lead to increased efficiency (and better performance). Note: This constructor is part of an experimental API that can change or be removed without any prior notice. Declaration public Marshaller(Action<T, SerializationContext> serializer, Func<DeserializationContext, T> deserializer) Parameters Type Name Description Action <T, SerializationContext > serializer Function that will be used to serialize messages. Func < DeserializationContext , T> deserializer Function that will be used to deserialize messages. Marshaller(Func<T, Byte[]>, Func<Byte[], T>) Initializes a new marshaller from simple serialize/deserialize functions. Declaration public Marshaller(Func<T, byte[]> serializer, Func<byte[], T> deserializer) Parameters Type Name Description Func <T, System.Byte []> serializer Function that will be used to serialize messages. Func < System.Byte [], T> deserializer Function that will be used to deserialize messages. Properties ContextualDeserializer Gets the serializer function. Note: experimental API that can change or be removed without any prior notice. Declaration public Func<DeserializationContext, T> ContextualDeserializer { get; } Property Value Type Description Func < DeserializationContext , T> ContextualSerializer Gets the serializer function. Note: experimental API that can change or be removed without any prior notice. Declaration public Action<T, SerializationContext> ContextualSerializer { get; } Property Value Type Description Action <T, SerializationContext > Deserializer Gets the deserializer function. Declaration public Func<byte[], T> Deserializer { get; } Property Value Type Description Func < System.Byte [], T> Serializer Gets the serializer function. Declaration public Func<T, byte[]> Serializer { get; } Property Value Type Description Func <T, System.Byte []>"
  },
  "api/Grpc.AspNetCore.Server.GrpcServiceOptions.html": {
    "href": "api/Grpc.AspNetCore.Server.GrpcServiceOptions.html",
    "title": "Class GrpcServiceOptions | gRPC for .NET",
    "keywords": "Class GrpcServiceOptions Options used to configure service instances. Inheritance System.Object GrpcServiceOptions GrpcServiceOptions<TService> Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public class GrpcServiceOptions : object Properties CompressionProviders Gets or sets the list of compression providers used to compress and decompress gRPC messages. Declaration public IList<ICompressionProvider> CompressionProviders { get; set; } Property Value Type Description IList < ICompressionProvider > EnableDetailedErrors Gets or sets a value indicating whether detailed error messages are sent to the peer. Detailed error messages include details from exceptions thrown on the server. Declaration public bool? EnableDetailedErrors { get; set; } Property Value Type Description System.Nullable < System.Boolean > Interceptors Get a collection of interceptors to be executed with every call. Interceptors are executed in order. Declaration public InterceptorCollection Interceptors { get; } Property Value Type Description InterceptorCollection MaxReceiveMessageSize Gets or sets the maximum message size in bytes that can be received by the server. Declaration public int? MaxReceiveMessageSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > MaxSendMessageSize Gets or sets the maximum message size in bytes that can be sent from the server. Declaration public int? MaxSendMessageSize { get; set; } Property Value Type Description System.Nullable < System.Int32 > ResponseCompressionAlgorithm Gets or sets the compression algorithm used to compress messages sent from the server. The request grpc-accept-encoding header value must contain this algorithm for it to be used. Declaration public string? ResponseCompressionAlgorithm { get; set; } Property Value Type Description System.Nullable < System.String > ResponseCompressionLevel Gets or sets the compression level used to compress messages sent from the server. The compression level will be passed to the compression provider. Declaration public CompressionLevel? ResponseCompressionLevel { get; set; } Property Value Type Description System.Nullable < CompressionLevel >"
  },
  "api/Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation-2.html",
    "title": "Delegate Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple blocking invocations. A delegate of this type is passed to the BlockingUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate context and request values as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate TResponse BlockingUnaryCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request The request value to continue the invocation with. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description TResponse The response value of the invocation to return to the caller. The interceptor can choose to return the return value of the continuation delegate or an arbitrary value as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Grpc.Core.Interceptors.CallInvokerExtensions.html": {
    "href": "api/Grpc.Core.Interceptors.CallInvokerExtensions.html",
    "title": "Class CallInvokerExtensions | gRPC for .NET",
    "keywords": "Class CallInvokerExtensions Extends the CallInvoker class to provide the interceptor facility on the client side. Inheritance System.Object CallInvokerExtensions Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public static class CallInvokerExtensions : object Methods Intercept(CallInvoker, Func<Metadata, Metadata>) Returns a CallInvoker instance that intercepts the invoker with the given interceptor. Declaration public static CallInvoker Intercept(this CallInvoker invoker, Func<Metadata, Metadata> interceptor) Parameters Type Name Description CallInvoker invoker The underlying invoker to intercept. Func < Metadata , Metadata > interceptor An interceptor delegate that takes the request metadata to be sent with an outgoing call and returns a Metadata instance that will replace the existing invocation metadata. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by building a chain like \"invoker.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(CallInvoker, Interceptor) Returns a CallInvoker instance that intercepts the invoker with the given interceptor. Declaration public static CallInvoker Intercept(this CallInvoker invoker, Interceptor interceptor) Parameters Type Name Description CallInvoker invoker The underlying invoker to intercept. Interceptor interceptor The interceptor to intercept calls to the invoker with. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"invoker.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted CallInvoker, effectively building a chain like \"invoker.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control. Intercept(CallInvoker, Interceptor[]) Returns a CallInvoker instance that intercepts the invoker with the given interceptors. Declaration public static CallInvoker Intercept(this CallInvoker invoker, params Interceptor[] interceptors) Parameters Type Name Description CallInvoker invoker The channel to intercept. Interceptor [] interceptors An array of interceptors to intercept the calls to the invoker with. Control is passed to the interceptors in the order specified. Returns Type Description CallInvoker Remarks Multiple interceptors can be added on top of each other by calling \"invoker.Intercept(a, b, c)\". The order of invocation will be \"a\", \"b\", and then \"c\". Interceptors can be later added to an existing intercepted CallInvoker, effectively building a chain like \"invoker.Intercept(c).Intercept(b).Intercept(a)\". Note that in this case, the last interceptor added will be the first to take control."
  },
  "api/Grpc.Core.CallCredentialsConfiguratorBase.html": {
    "href": "api/Grpc.Core.CallCredentialsConfiguratorBase.html",
    "title": "Class CallCredentialsConfiguratorBase | gRPC for .NET",
    "keywords": "Class CallCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object CallCredentialsConfiguratorBase Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class CallCredentialsConfiguratorBase : object Methods SetAsyncAuthInterceptorCredentials(Object, AsyncAuthInterceptor) Consumes configuration for call credentials created from AsyncAuthInterceptor Declaration public abstract void SetAsyncAuthInterceptorCredentials(object state, AsyncAuthInterceptor interceptor) Parameters Type Name Description System.Object state AsyncAuthInterceptor interceptor SetCompositeCredentials(Object, IReadOnlyList<CallCredentials>) Consumes configuration for composite call credentials. Declaration public abstract void SetCompositeCredentials(object state, IReadOnlyList<CallCredentials> credentials) Parameters Type Name Description System.Object state IReadOnlyList < CallCredentials > credentials"
  },
  "api/Grpc.Net.ClientFactory.GrpcClientFactory.html": {
    "href": "api/Grpc.Net.ClientFactory.GrpcClientFactory.html",
    "title": "Class GrpcClientFactory | gRPC for .NET",
    "keywords": "Class GrpcClientFactory A factory abstraction for a component that can create gRPC client instances with custom configuration for a given logical name. Inheritance System.Object GrpcClientFactory Namespace : Grpc.Net.ClientFactory Assembly : Grpc.Net.ClientFactory.dll Syntax public abstract class GrpcClientFactory : object Methods CreateClient<TClient>(String) Create a gRPC client instance for the specified TClient and configuration name. Declaration public abstract TClient CreateClient<TClient>(string name) where TClient : ClientBase Parameters Type Name Description System.String name The configuration name. Returns Type Description TClient A gRPC client instance. Type Parameters Name Description TClient The gRPC client type."
  },
  "api/Grpc.Core.IAsyncStreamWriter-1.html": {
    "href": "api/Grpc.Core.IAsyncStreamWriter-1.html",
    "title": "Interface IAsyncStreamWriter<T> | gRPC for .NET",
    "keywords": "Interface IAsyncStreamWriter<T> A writable stream of messages. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IAsyncStreamWriter<T> Type Parameters Name Description T The message type. Properties WriteOptions Write options that will be used for the next write. If null, default options will be used. Once set, this property maintains its value across subsequent writes. Declaration WriteOptions WriteOptions { get; set; } Property Value Type Description WriteOptions Methods WriteAsync(T) Writes a single asynchronously. Only one write can be pending at a time. Declaration Task WriteAsync(T message) Parameters Type Name Description T message the message to be written. Cannot be null. Returns Type Description Task"
  },
  "api/Grpc.Core.IMethod.html": {
    "href": "api/Grpc.Core.IMethod.html",
    "title": "Interface IMethod | gRPC for .NET",
    "keywords": "Interface IMethod A non-generic representation of a remote method. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IMethod Properties FullName Gets the fully qualified name of the method. On the server side, methods are dispatched based on this name. Declaration string FullName { get; } Property Value Type Description System.String Name Gets the unqualified name of the method. Declaration string Name { get; } Property Value Type Description System.String ServiceName Gets the name of the service to which this method belongs. Declaration string ServiceName { get; } Property Value Type Description System.String Type Gets the type of the method. Declaration MethodType Type { get; } Property Value Type Description MethodType"
  },
  "api/Grpc.Net.Client.GrpcChannel.html": {
    "href": "api/Grpc.Net.Client.GrpcChannel.html",
    "title": "Class GrpcChannel | gRPC for .NET",
    "keywords": "Class GrpcChannel Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers. Client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking a remote call so in general you should reuse a single channel for as many calls as possible. Inheritance ChannelBase GrpcChannel Implements IDisposable Namespace : Grpc.Net.Client Assembly : Grpc.Net.Client.dll Syntax public sealed class GrpcChannel : ChannelBase, IDisposable Methods CreateCallInvoker() Create a new for the channel. Declaration public override CallInvoker CreateCallInvoker() Returns Type Description CallInvoker A new . Dispose() Releases the resources used by the GrpcChannel class. Clients created with the channel can't be used after the channel is disposed. Declaration public void Dispose() ForAddress(String) Creates a GrpcChannel for the specified address. Declaration public static GrpcChannel ForAddress(string address) Parameters Type Name Description System.String address The address the channel will use. Returns Type Description GrpcChannel A new instance of GrpcChannel . ForAddress(String, GrpcChannelOptions) Creates a GrpcChannel for the specified address and configuration options. Declaration public static GrpcChannel ForAddress(string address, GrpcChannelOptions channelOptions) Parameters Type Name Description System.String address The address the channel will use. GrpcChannelOptions channelOptions The channel configuration options. Returns Type Description GrpcChannel A new instance of GrpcChannel . ForAddress(Uri) Creates a GrpcChannel for the specified address. Declaration public static GrpcChannel ForAddress(Uri address) Parameters Type Name Description Uri address The address the channel will use. Returns Type Description GrpcChannel A new instance of GrpcChannel . ForAddress(Uri, GrpcChannelOptions) Creates a GrpcChannel for the specified address and configuration options. Declaration public static GrpcChannel ForAddress(Uri address, GrpcChannelOptions channelOptions) Parameters Type Name Description Uri address The address the channel will use. GrpcChannelOptions channelOptions The channel configuration options. Returns Type Description GrpcChannel A new instance of GrpcChannel . Implements IDisposable"
  },
  "api/Grpc.Core.html": {
    "href": "api/Grpc.Core.html",
    "title": "Namespace Grpc.Core | gRPC for .NET",
    "keywords": "Namespace Grpc.Core Classes AsyncClientStreamingCall<TRequest, TResponse> Return type for client streaming calls. AsyncDuplexStreamingCall<TRequest, TResponse> Return type for bidirectional streaming calls. AsyncServerStreamingCall<TResponse> Return type for server streaming calls. AsyncStreamReaderExtensions Extension methods for IAsyncStreamReader<T> . AsyncUnaryCall<TResponse> Return type for single request - single response call. AuthContext Authentication context for a call. AuthContext is the only reliable source of truth when it comes to authenticating calls. Using any other call/context properties for authentication purposes is wrong and inherently unsafe. Note: experimental API that can change or be removed without any prior notice. AuthInterceptorContext Context for an RPC being intercepted by AsyncAuthInterceptor . AuthProperty A property of an AuthContext . Note: experimental API that can change or be removed without any prior notice. BindServiceMethodAttribute Specifies the location of the service bind method for a gRPC service. The bind method is typically generated code and is used to register a service's methods with the server on startup. The bind method signature takes a ServiceBinderBase and an optional instance of the service base class, e.g. static void BindService(ServiceBinderBase, GreeterService) . CallCredentials Client-side call credentials. Provide authorization with per-call granularity. CallCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. CallInvoker Abstraction of client-side RPC invocation. ChannelBase Base class for gRPC channel. Channels are an abstraction of long-lived connections to remote servers. ChannelCredentials Client-side channel credentials. Used for creation of a secure channel. ChannelCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. ClientBase Base class for client-side stubs. ClientBase.ClientBaseConfiguration Represents configuration of ClientBase. The class itself is visible to subclasses, but contents are marked as internal to make the instances opaque. The verbose name of this class was chosen to make name clash in generated code less likely. ClientBase<T> Generic base class for client-side stubs. ContextPropagationOptions Options for ContextPropagationToken . ContextPropagationToken Token for propagating context of server side handlers to child calls. In situations when a backend is making calls to another backend, it makes sense to propagate properties like deadline and cancellation token of the server call to the child call. Underlying gRPC implementation may provide other \"opaque\" contexts (like tracing context) that are not explicitly accesible via the public C# API, but this token still allows propagating them. DeserializationContext Provides access to the payload being deserialized when deserializing messages. KeyCertificatePair Key certificate pair (in PEM encoding). LiteClientBase Base class for lightweight client-side stubs. All calls are invoked via a CallInvoker . Lite client stubs have no configuration knobs, all configuration is provided by decorating the call invoker. Note: experimental API that can change or be removed without any prior notice. Marshaller<T> Encapsulates the logic for serializing and deserializing messages. Marshallers Utilities for creating marshallers. Metadata A collection of metadata entries that can be exchanged during a call. gRPC supports these types of metadata: Request headersare sent by the client at the beginning of a remote call before any request messages are sent. Response headersare sent by the server at the beginning of a remote call handler before any response messages are sent. Response trailersare sent by the server at the end of a remote call along with resulting call status. Metadata.Entry Metadata entry Method<TRequest, TResponse> A description of a remote method. RpcException Thrown when remote procedure call fails. Every RpcException is associated with a resulting Status of the call. SerializationContext Provides storage for payload when serializing a message. ServerCallContext Context for a server-side call. ServerCallContextExtensions Extension methods for ServerCallContext. ServerServiceDefinition Stores mapping of methods to server call handlers. Normally, the ServerServiceDefinition objects will be created by the BindService factory method that is part of the autogenerated code for a protocol buffers service definition. ServerServiceDefinition.Builder Builder class for ServerServiceDefinition . ServiceBinderBase Allows binding server-side method implementations in alternative serving stacks. Instances of this class are usually populated by the BindService method that is part of the autogenerated code for a protocol buffers service definition. SslCredentials Client-side SSL credentials. VerifyPeerContext Verification context for VerifyPeerCallback. Note: experimental API that can change or be removed without any prior notice. VersionInfo Provides info about current version of gRPC. See https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/ for rationale about assembly versioning. WriteOptions Options for write operations. Structs CallOptions Options for calls made by client. Status Represents RPC result, which consists of StatusCode and an optional detail string. Interfaces IAsyncStreamReader<T> A stream of messages to be read. Messages can be awaited await reader.MoveNext() , that returns true if there is a message available and false if there are no more messages (i.e. the stream has been closed). On the client side, the last invocation of MoveNext() either returns false if the call has finished successfully or throws RpcException if call finished with an error. Once the call finishes, subsequent invocations of MoveNext() will continue yielding the same result (returning false or throwing an exception). On the server side, MoveNext() does not throw exceptions. In case of a failure, the request stream will appear to be finished ( MoveNext will return false ) and the CancellationToken associated with the call will be cancelled to signal the failure. MoveNext() operations can be cancelled via a cancellation token. Cancelling an individual read operation has the same effect as cancelling the entire call (which will also result in the read operation returning prematurely), but the per-read cancellation tokens passed to MoveNext() only result in cancelling the call if the read operation haven't finished yet. IAsyncStreamWriter<T> A writable stream of messages. IClientStreamWriter<T> Client-side writable stream of messages with Close capability. IMethod A non-generic representation of a remote method. IServerStreamWriter<T> A writable stream of messages that is used in server-side handlers. Enums MethodType Method types supported by gRPC. StatusCode Result of a remote procedure call. Based on grpc_status_code from grpc/status.h WriteFlags Flags for write operations. Delegates AsyncAuthInterceptor Asynchronous authentication interceptor for CallCredentials . ClientStreamingServerMethod<TRequest, TResponse> Server-side handler for client streaming call. DuplexStreamingServerMethod<TRequest, TResponse> Server-side handler for bidi streaming call. ServerStreamingServerMethod<TRequest, TResponse> Server-side handler for server streaming call. UnaryServerMethod<TRequest, TResponse> Server-side handler for unary call. VerifyPeerCallback Callback invoked with the expected targetHost and the peer's certificate. If false is returned by this callback then it is treated as a verification failure and the attempted connection will fail. Invocation of the callback is blocking, so any implementation should be light-weight. Note that the callback can potentially be invoked multiple times, concurrently from different threads (e.g. when multiple connections are being created for the same credentials)."
  },
  "api/Grpc.Core.ChannelCredentials.html": {
    "href": "api/Grpc.Core.ChannelCredentials.html",
    "title": "Class ChannelCredentials | gRPC for .NET",
    "keywords": "Class ChannelCredentials Client-side channel credentials. Used for creation of a secure channel. Inheritance System.Object ChannelCredentials SslCredentials Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ChannelCredentials : object Constructors ChannelCredentials() Creates a new instance of channel credentials Declaration public ChannelCredentials() Properties Insecure Returns instance of credentials that provides no security and will result in creating an unsecure channel with no encryption whatsoever. Declaration public static ChannelCredentials Insecure { get; } Property Value Type Description ChannelCredentials Methods Create(ChannelCredentials, CallCredentials) Creates a new instance of ChannelCredentials class by composing given channel credentials with call credentials. Declaration public static ChannelCredentials Create(ChannelCredentials channelCredentials, CallCredentials callCredentials) Parameters Type Name Description ChannelCredentials channelCredentials Channel credentials. CallCredentials callCredentials Call credentials. Returns Type Description ChannelCredentials The new composite ChannelCredentials InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase, Object) Populates channel credentials configurator with this instance's configuration. End users never need to invoke this method as it is part of internal implementation. Declaration public abstract void InternalPopulateConfiguration(ChannelCredentialsConfiguratorBase configurator, object state) Parameters Type Name Description ChannelCredentialsConfiguratorBase configurator System.Object state"
  },
  "api/Grpc.Core.Metadata.html": {
    "href": "api/Grpc.Core.Metadata.html",
    "title": "Class Metadata | gRPC for .NET",
    "keywords": "Class Metadata A collection of metadata entries that can be exchanged during a call. gRPC supports these types of metadata: Request headersare sent by the client at the beginning of a remote call before any request messages are sent. Response headersare sent by the server at the beginning of a remote call handler before any response messages are sent. Response trailersare sent by the server at the end of a remote call along with resulting call status. Inheritance IList < Metadata.Entry > Metadata Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class Metadata : IList<Metadata.Entry> Constructors Metadata() Initializes a new instance of Metadata . Declaration public Metadata() Fields BinaryHeaderSuffix All binary headers should have this suffix. Declaration public const string BinaryHeaderSuffix = null Field Value Type Description System.String Empty An read-only instance of metadata containing no entries. Declaration public static readonly Metadata Empty Field Value Type Description Metadata Properties Count IList<> Declaration public int Count { get; } Property Value Type Description System.Int32 IsReadOnly IList<> Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Item[Int32] IList<> Declaration public Metadata.Entry this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description Metadata.Entry Methods Add(Metadata.Entry) IList<> Declaration public void Add(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Add(String, Byte[]) Adds a new binary-valued metadata entry. See Metadata.Entry constructor for params. Declaration public void Add(string key, byte[] valueBytes) Parameters Type Name Description System.String key System.Byte [] valueBytes Add(String, String) Adds a new ASCII-valued metadata entry. See Metadata.Entry constructor for params. Declaration public void Add(string key, string value) Parameters Type Name Description System.String key System.String value Clear() IList<> Declaration public void Clear() Contains(Metadata.Entry) IList<> Declaration public bool Contains(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Returns Type Description System.Boolean CopyTo(Metadata.Entry[], Int32) IList<> Declaration public void CopyTo(Metadata.Entry[] array, int arrayIndex) Parameters Type Name Description Metadata.Entry [] array System.Int32 arrayIndex GetEnumerator() IList<> Declaration public IEnumerator<Metadata.Entry> GetEnumerator() Returns Type Description IEnumerator < Metadata.Entry > IndexOf(Metadata.Entry) IList<> Declaration public int IndexOf(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Returns Type Description System.Int32 Insert(Int32, Metadata.Entry) IList<> Declaration public void Insert(int index, Metadata.Entry item) Parameters Type Name Description System.Int32 index Metadata.Entry item Remove(Metadata.Entry) IList<> Declaration public bool Remove(Metadata.Entry item) Parameters Type Name Description Metadata.Entry item Returns Type Description System.Boolean RemoveAt(Int32) IList<> Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index"
  },
  "api/Grpc.Core.AsyncStreamReaderExtensions.html": {
    "href": "api/Grpc.Core.AsyncStreamReaderExtensions.html",
    "title": "Class AsyncStreamReaderExtensions | gRPC for .NET",
    "keywords": "Class AsyncStreamReaderExtensions Extension methods for IAsyncStreamReader<T> . Inheritance System.Object AsyncStreamReaderExtensions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public static class AsyncStreamReaderExtensions : object Methods MoveNext<T>(IAsyncStreamReader<T>) Advances the stream reader to the next element in the sequence, returning the result asynchronously. Declaration public static Task<bool> MoveNext<T>(this IAsyncStreamReader<T> streamReader) where T : class Parameters Type Name Description IAsyncStreamReader <T> streamReader The stream reader. Returns Type Description Task < System.Boolean > Task containing the result of the operation: true if the reader was successfully advanced to the next element; false if the reader has passed the end of the sequence. Type Parameters Name Description T The message type."
  },
  "api/Grpc.Core.ServerCallContextExtensions.html": {
    "href": "api/Grpc.Core.ServerCallContextExtensions.html",
    "title": "Class ServerCallContextExtensions | gRPC for .NET",
    "keywords": "Class ServerCallContextExtensions Extension methods for ServerCallContext. Inheritance System.Object ServerCallContextExtensions Namespace : Grpc.Core Assembly : Grpc.AspNetCore.Server.dll Syntax public static class ServerCallContextExtensions : object Methods GetHttpContext(ServerCallContext) Retrieve the from a if possible. Note that read-only access is recommended as changes to the HttpContext is not synchronized with the ServerCallContext. The HttpContext is only available when using gRPC with ASP.NET Core. Declaration public static HttpContext GetHttpContext(this ServerCallContext serverCallContext) Parameters Type Name Description ServerCallContext serverCallContext The to extract from. Returns Type Description HttpContext The extracted . If it cannot be extracted, an error will be thrown."
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous client-streaming invocations. A delegate of this type is passed to the AsyncClientStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCallContinuation<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> An instance of AsyncClientStreamingCall<TRequest, TResponse> representing an asynchronous invocation of a client-streaming RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Microsoft.Extensions.DependencyInjection.GrpcServerHttpClientBuilderExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.GrpcServerHttpClientBuilderExtensions.html",
    "title": "Class GrpcServerHttpClientBuilderExtensions | gRPC for .NET",
    "keywords": "Class GrpcServerHttpClientBuilderExtensions Extension methods for configuring an . Inheritance System.Object GrpcServerHttpClientBuilderExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Grpc.AspNetCore.Server.ClientFactory.dll Syntax public static class GrpcServerHttpClientBuilderExtensions : object Methods EnableCallContextPropagation(IHttpClientBuilder) Configures the server to propagate values from a call's onto the gRPC client. Declaration public static IHttpClientBuilder EnableCallContextPropagation(this IHttpClientBuilder builder) Parameters Type Name Description IHttpClientBuilder builder The . Returns Type Description IHttpClientBuilder An that can be used to configure the client."
  },
  "api/Microsoft.Extensions.DependencyInjection.GrpcReflectionServiceExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.GrpcReflectionServiceExtensions.html",
    "title": "Class GrpcReflectionServiceExtensions | gRPC for .NET",
    "keywords": "Class GrpcReflectionServiceExtensions Extension methods for the gRPC reflection services. Inheritance System.Object GrpcReflectionServiceExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Grpc.AspNetCore.Server.Reflection.dll Syntax public static class GrpcReflectionServiceExtensions : object Methods AddGrpcReflection(IServiceCollection) Adds gRPC reflection services to the specified . Declaration public static IServiceCollection AddGrpcReflection(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The for adding services. Returns Type Description IServiceCollection The so that additional calls can be chained."
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> Represents a continuation for intercepting asynchronous server-streaming invocations. A delegate of this type is passed to the AsyncServerStreamingCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncServerStreamingCall<TResponse> AsyncServerStreamingCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request The request value to continue the invocation with. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncServerStreamingCall <TResponse> An instance of AsyncServerStreamingCall<TResponse> representing an asynchronous invocation of a server-streaming RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Microsoft.Extensions.DependencyInjection.GrpcClientServiceExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.GrpcClientServiceExtensions.html",
    "title": "Class GrpcClientServiceExtensions | gRPC for .NET",
    "keywords": "Class GrpcClientServiceExtensions Extensions methods to configure an for with gRPC. Inheritance System.Object GrpcClientServiceExtensions Namespace : Microsoft.Extensions.DependencyInjection Assembly : Grpc.Net.ClientFactory.dll Syntax public static class GrpcClientServiceExtensions : object Methods AddGrpcClient<TClient>(IServiceCollection) Adds the and related services to the and configures a binding between the TClient type and a named . The client name will be set to the type name of TClient . Declaration public static IHttpClientBuilder AddGrpcClient<TClient>(this IServiceCollection services) where TClient : ClientBase Parameters Type Name Description IServiceCollection services The . Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TClient The type of the gRPC client. The type specified will be registered in the service collection as a transient service. Remarks instances that apply the provided configuration can be retrieved using and providing the matching name. TClient instances constructed with the appropriate can be retrieved from (and related methods) by providing TClient as the service type. AddGrpcClient<TClient>(IServiceCollection, Action<GrpcClientFactoryOptions>) Adds the and related services to the and configures a binding between the TClient type and a named . The client name will be set to the type name of TClient . Declaration public static IHttpClientBuilder AddGrpcClient<TClient>(this IServiceCollection services, Action<GrpcClientFactoryOptions> configureClient) where TClient : ClientBase Parameters Type Name Description IServiceCollection services The . Action < GrpcClientFactoryOptions > configureClient A delegate that is used to configure the gRPC client. Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TClient The type of the gRPC client. The type specified will be registered in the service collection as a transient service. Remarks instances that apply the provided configuration can be retrieved using and providing the matching name. TClient instances constructed with the appropriate can be retrieved from (and related methods) by providing TClient as the service type. AddGrpcClient<TClient>(IServiceCollection, Action<IServiceProvider, GrpcClientFactoryOptions>) Adds the and related services to the and configures a binding between the TClient type and a named . The client name will be set to the type name of TClient . Declaration public static IHttpClientBuilder AddGrpcClient<TClient>(this IServiceCollection services, Action<IServiceProvider, GrpcClientFactoryOptions> configureClient) where TClient : ClientBase Parameters Type Name Description IServiceCollection services The . Action < IServiceProvider , GrpcClientFactoryOptions > configureClient A delegate that is used to configure the gRPC client. Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TClient The type of the gRPC client. The type specified will be registered in the service collection as a transient service. Remarks instances that apply the provided configuration can be retrieved using and providing the matching name. TClient instances constructed with the appropriate can be retrieved from (and related methods) by providing TClient as the service type. The argument provided to configureClient will be a reference to a scoped service provider that shares the lifetime of the handler being constructed. AddGrpcClient<TClient>(IServiceCollection, String) Adds the and related services to the and configures a binding between the TClient type and a named . Declaration public static IHttpClientBuilder AddGrpcClient<TClient>(this IServiceCollection services, string name) where TClient : ClientBase Parameters Type Name Description IServiceCollection services The . System.String name The logical name of the to configure. Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TClient The type of the gRPC client. The type specified will be registered in the service collection as a transient service. Remarks instances that apply the provided configuration can be retrieved using and providing the matching name. TClient instances constructed with the appropriate can be retrieved from (and related methods) by providing TClient as the service type. AddGrpcClient<TClient>(IServiceCollection, String, Action<GrpcClientFactoryOptions>) Adds the and related services to the and configures a binding between the TClient type and a named . Declaration public static IHttpClientBuilder AddGrpcClient<TClient>(this IServiceCollection services, string name, Action<GrpcClientFactoryOptions> configureClient) where TClient : ClientBase Parameters Type Name Description IServiceCollection services The . System.String name The logical name of the to configure. Action < GrpcClientFactoryOptions > configureClient A delegate that is used to configure the gRPC client. Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TClient The type of the gRPC client. The type specified will be registered in the service collection as a transient service. Remarks instances that apply the provided configuration can be retrieved using and providing the matching name. TClient instances constructed with the appropriate can be retrieved from (and related methods) by providing TClient as the service type. AddGrpcClient<TClient>(IServiceCollection, String, Action<IServiceProvider, GrpcClientFactoryOptions>) Adds the and related services to the and configures a binding between the TClient type and a named . Declaration public static IHttpClientBuilder AddGrpcClient<TClient>(this IServiceCollection services, string name, Action<IServiceProvider, GrpcClientFactoryOptions> configureClient) where TClient : ClientBase Parameters Type Name Description IServiceCollection services The . System.String name The logical name of the to configure. Action < IServiceProvider , GrpcClientFactoryOptions > configureClient A delegate that is used to configure the gRPC client. Returns Type Description IHttpClientBuilder An that can be used to configure the client. Type Parameters Name Description TClient The type of the gRPC client. The type specified will be registered in the service collection as a transient service. Remarks instances that apply the provided configuration can be retrieved using and providing the matching name. TClient instances constructed with the appropriate can be retrieved from (and related methods) by providing TClient as the service type. The argument provided to configureClient will be a reference to a scoped service provider that shares the lifetime of the handler being constructed."
  },
  "api/Grpc.Net.Compression.html": {
    "href": "api/Grpc.Net.Compression.html",
    "title": "Namespace Grpc.Net.Compression | gRPC for .NET",
    "keywords": "Namespace Grpc.Net.Compression Classes GzipCompressionProvider GZIP compression provider. Interfaces ICompressionProvider Provides a specific compression implementation to compress gRPC messages."
  },
  "api/Grpc.Core.DeserializationContext.html": {
    "href": "api/Grpc.Core.DeserializationContext.html",
    "title": "Class DeserializationContext | gRPC for .NET",
    "keywords": "Class DeserializationContext Provides access to the payload being deserialized when deserializing messages. Inheritance System.Object DeserializationContext Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class DeserializationContext : object Properties PayloadLength Get the total length of the payload in bytes. Declaration public abstract int PayloadLength { get; } Property Value Type Description System.Int32 Methods PayloadAsNewBuffer() Gets the entire payload as a newly allocated byte array. Once the byte array is returned, the byte array becomes owned by the caller and won't be ever accessed or reused by gRPC again. NOTE: Obtaining the buffer as a newly allocated byte array is the simplest way of accessing the payload, but it can have important consequences in high-performance scenarios. In particular, using this method usually requires copying of the entire buffer one extra time. Also, allocating a new buffer each time can put excessive pressure on GC, especially if the payload is more than 86700 bytes large (which means the newly allocated buffer will be placed in LOH, and LOH object can only be garbage collected via a full (\"stop the world\") GC run). NOTE: Deserializers are expected not to call this method (or other payload accessor methods) more than once per received message (as there is no practical reason for doing so) and DeserializationContext implementations are free to assume so. Declaration public virtual byte[] PayloadAsNewBuffer() Returns Type Description System.Byte [] byte array containing the entire payload. PayloadAsReadOnlySequence() Gets the entire payload as a ReadOnlySequence. The ReadOnlySequence is only valid for the duration of the deserializer routine and the caller must not access it after the deserializer returns. Using the read only sequence is the most efficient way to access the message payload. Where possible it allows directly accessing the received payload without needing to perform any buffer copying or buffer allocations. NOTE: When using this method, it is recommended to use C# 7.2 compiler to make it more useful (using Span type directly from your code requires C# 7.2).\" NOTE: Deserializers are expected not to call this method (or other payload accessor methods) more than once per received message (as there is no practical reason for doing so) and DeserializationContext implementations are free to assume so. Declaration public virtual System.Buffers.ReadOnlySequence<byte> PayloadAsReadOnlySequence() Returns Type Description System.Buffers.ReadOnlySequence < System.Byte > read only sequence containing the entire payload."
  },
  "api/Grpc.AspNetCore.Server.IServerCallContextFeature.html": {
    "href": "api/Grpc.AspNetCore.Server.IServerCallContextFeature.html",
    "title": "Interface IServerCallContextFeature | gRPC for .NET",
    "keywords": "Interface IServerCallContextFeature Provides access to the gRPC server call context for the current HTTP request. Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public interface IServerCallContextFeature Properties ServerCallContext Gets the gRPC server call context for the current HTTP request. Declaration ServerCallContext ServerCallContext { get; } Property Value Type Description ServerCallContext"
  },
  "api/Grpc.Core.ClientBase.html": {
    "href": "api/Grpc.Core.ClientBase.html",
    "title": "Class ClientBase | gRPC for .NET",
    "keywords": "Class ClientBase Base class for client-side stubs. Inheritance System.Object ClientBase ClientBase<T> Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ClientBase : object Constructors ClientBase() Initializes a new instance of ClientBase class that throws NotImplementedException upon invocation of any RPC. This constructor is only provided to allow creation of test doubles for client classes (e.g. mocking requires a parameterless constructor). Declaration protected ClientBase() ClientBase(CallInvoker) Initializes a new instance of ClientBase class. Declaration public ClientBase(CallInvoker callInvoker) Parameters Type Name Description CallInvoker callInvoker The CallInvoker for remote call invocation. ClientBase(ChannelBase) Initializes a new instance of ClientBase class. Declaration public ClientBase(ChannelBase channel) Parameters Type Name Description ChannelBase channel The channel to use for remote call invocation. ClientBase(ClientBase.ClientBaseConfiguration) Initializes a new instance of ClientBase class. Declaration protected ClientBase(ClientBase.ClientBaseConfiguration configuration) Parameters Type Name Description ClientBase.ClientBaseConfiguration configuration The configuration. Properties CallInvoker Gets the call invoker. Declaration protected CallInvoker CallInvoker { get; } Property Value Type Description CallInvoker"
  },
  "api/Grpc.AspNetCore.Server.Model.ServiceMethodProviderContext-1.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.ServiceMethodProviderContext-1.html",
    "title": "Class ServiceMethodProviderContext<TService> | gRPC for .NET",
    "keywords": "Class ServiceMethodProviderContext<TService> A context for IServiceMethodProvider<TService> . Inheritance System.Object ServiceMethodProviderContext<TService> Namespace : Grpc.AspNetCore.Server.Model Assembly : Grpc.AspNetCore.Server.dll Syntax public class ServiceMethodProviderContext<TService> : object where TService : class Type Parameters Name Description TService Service type for the context. Methods AddClientStreamingMethod<TRequest, TResponse>(Method<TRequest, TResponse>, IList<Object>, ClientStreamingServerMethod<TService, TRequest, TResponse>) Adds a client streaming method to a service. Declaration public void AddClientStreamingMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, IList<object> metadata, ClientStreamingServerMethod<TService, TRequest, TResponse> invoker) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method description. IList < System.Object > metadata The method metadata. This metadata can be used by routing and middleware when invoking a gRPC method. ClientStreamingServerMethod <TService, TRequest, TResponse> invoker The method invoker that is executed when the method is called. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. AddDuplexStreamingMethod<TRequest, TResponse>(Method<TRequest, TResponse>, IList<Object>, DuplexStreamingServerMethod<TService, TRequest, TResponse>) Adds a duplex streaming method to a service. Declaration public void AddDuplexStreamingMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, IList<object> metadata, DuplexStreamingServerMethod<TService, TRequest, TResponse> invoker) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method description. IList < System.Object > metadata The method metadata. This metadata can be used by routing and middleware when invoking a gRPC method. DuplexStreamingServerMethod <TService, TRequest, TResponse> invoker The method invoker that is executed when the method is called. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. AddServerStreamingMethod<TRequest, TResponse>(Method<TRequest, TResponse>, IList<Object>, ServerStreamingServerMethod<TService, TRequest, TResponse>) Adds a server streaming method to a service. Declaration public void AddServerStreamingMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, IList<object> metadata, ServerStreamingServerMethod<TService, TRequest, TResponse> invoker) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method description. IList < System.Object > metadata The method metadata. This metadata can be used by routing and middleware when invoking a gRPC method. ServerStreamingServerMethod <TService, TRequest, TResponse> invoker The method invoker that is executed when the method is called. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. AddUnaryMethod<TRequest, TResponse>(Method<TRequest, TResponse>, IList<Object>, UnaryServerMethod<TService, TRequest, TResponse>) Adds a unary method to a service. Declaration public void AddUnaryMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, IList<object> metadata, UnaryServerMethod<TService, TRequest, TResponse> invoker) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method description. IList < System.Object > metadata The method metadata. This metadata can be used by routing and middleware when invoking a gRPC method. UnaryServerMethod <TService, TRequest, TResponse> invoker The method invoker that is executed when the method is called. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.AspNetCore.Server.GrpcMethodMetadata.html": {
    "href": "api/Grpc.AspNetCore.Server.GrpcMethodMetadata.html",
    "title": "Class GrpcMethodMetadata | gRPC for .NET",
    "keywords": "Class GrpcMethodMetadata Metadata for a gRPC method endpoint. Inheritance System.Object GrpcMethodMetadata Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public sealed class GrpcMethodMetadata : object Constructors GrpcMethodMetadata(Type, IMethod) Creates a new instance of GrpcMethodMetadata with the provided service type and method. Declaration public GrpcMethodMetadata(Type serviceType, IMethod method) Parameters Type Name Description Type serviceType The implementing service type. IMethod method The method representation. Properties Method Gets the method representation. Declaration public IMethod Method { get; } Property Value Type Description IMethod ServiceType Gets the implementing service type. Declaration public Type ServiceType { get; } Property Value Type Description Type"
  },
  "api/Grpc.Core.ChannelCredentialsConfiguratorBase.html": {
    "href": "api/Grpc.Core.ChannelCredentialsConfiguratorBase.html",
    "title": "Class ChannelCredentialsConfiguratorBase | gRPC for .NET",
    "keywords": "Class ChannelCredentialsConfiguratorBase Base class for objects that can consume configuration from CallCredentials objects. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object ChannelCredentialsConfiguratorBase Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ChannelCredentialsConfiguratorBase : object Methods SetCompositeCredentials(Object, ChannelCredentials, CallCredentials) Configures the credentials to use composite channel credentials (a composite of channel credentials and call credentials). Declaration public abstract void SetCompositeCredentials(object state, ChannelCredentials channelCredentials, CallCredentials callCredentials) Parameters Type Name Description System.Object state ChannelCredentials channelCredentials CallCredentials callCredentials SetInsecureCredentials(Object) Configures the credentials to use insecure credentials. Declaration public abstract void SetInsecureCredentials(object state) Parameters Type Name Description System.Object state SetSslCredentials(Object, String, KeyCertificatePair, VerifyPeerCallback) Configures the credentials to use SslCredentials . Declaration public abstract void SetSslCredentials(object state, string rootCertificates, KeyCertificatePair keyCertificatePair, VerifyPeerCallback verifyPeerCallback) Parameters Type Name Description System.Object state System.String rootCertificates KeyCertificatePair keyCertificatePair VerifyPeerCallback verifyPeerCallback"
  },
  "api/Grpc.Core.CallCredentials.html": {
    "href": "api/Grpc.Core.CallCredentials.html",
    "title": "Class CallCredentials | gRPC for .NET",
    "keywords": "Class CallCredentials Client-side call credentials. Provide authorization with per-call granularity. Inheritance System.Object CallCredentials Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class CallCredentials : object Methods Compose(CallCredentials[]) Composes multiple multiple CallCredentials objects into a single CallCredentials object. Declaration public static CallCredentials Compose(params CallCredentials[] credentials) Parameters Type Name Description CallCredentials [] credentials credentials to compose Returns Type Description CallCredentials The new CompositeCallCredentials FromInterceptor(AsyncAuthInterceptor) Creates a new instance of CallCredentials class from an interceptor that can attach metadata to outgoing calls. Declaration public static CallCredentials FromInterceptor(AsyncAuthInterceptor interceptor) Parameters Type Name Description AsyncAuthInterceptor interceptor authentication interceptor Returns Type Description CallCredentials InternalPopulateConfiguration(CallCredentialsConfiguratorBase, Object) Populates call credentials configurator with this instance's configuration. End users never need to invoke this method as it is part of internal implementation. Declaration public abstract void InternalPopulateConfiguration(CallCredentialsConfiguratorBase configurator, object state) Parameters Type Name Description CallCredentialsConfiguratorBase configurator System.Object state"
  },
  "api/Grpc.Core.AsyncDuplexStreamingCall-2.html": {
    "href": "api/Grpc.Core.AsyncDuplexStreamingCall-2.html",
    "title": "Class AsyncDuplexStreamingCall<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Class AsyncDuplexStreamingCall<TRequest, TResponse> Return type for bidirectional streaming calls. Inheritance IDisposable AsyncDuplexStreamingCall<TRequest, TResponse> Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class AsyncDuplexStreamingCall<TRequest, TResponse> : IDisposable Type Parameters Name Description TRequest Request message type for this call. TResponse Response message type for this call. Constructors AsyncDuplexStreamingCall(IClientStreamWriter<TRequest>, IAsyncStreamReader<TResponse>, Task<Metadata>, Func<Status>, Func<Metadata>, Action) Creates a new AsyncDuplexStreamingCall object with the specified properties. Declaration public AsyncDuplexStreamingCall(IClientStreamWriter<TRequest> requestStream, IAsyncStreamReader<TResponse> responseStream, Task<Metadata> responseHeadersAsync, Func<Status> getStatusFunc, Func<Metadata> getTrailersFunc, Action disposeAction) Parameters Type Name Description IClientStreamWriter <TRequest> requestStream Stream of request values. IAsyncStreamReader <TResponse> responseStream Stream of response values. Task < Metadata > responseHeadersAsync Response headers of the asynchronous call. Func < Status > getStatusFunc Delegate returning the status of the call. Func < Metadata > getTrailersFunc Delegate returning the trailing metadata of the call. Action disposeAction Delegate to invoke when Dispose is called on the call object. Properties RequestStream Async stream to send streaming requests. Declaration public IClientStreamWriter<TRequest> RequestStream { get; } Property Value Type Description IClientStreamWriter <TRequest> ResponseHeadersAsync Asynchronous access to response headers. Declaration public Task<Metadata> ResponseHeadersAsync { get; } Property Value Type Description Task < Metadata > ResponseStream Async stream to read streaming responses. Declaration public IAsyncStreamReader<TResponse> ResponseStream { get; } Property Value Type Description IAsyncStreamReader <TResponse> Methods Dispose() Provides means to cleanup after the call. If the call has already finished normally (request stream has been completed and response stream has been fully read), doesn't do anything. Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call. As a result, all resources being used by the call should be released eventually. Declaration public void Dispose() Remarks Normally, there is no need for you to dispose the call unless you want to utilize the \"Cancel\" semantics of invoking Dispose . GetStatus() Gets the call status if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Status GetStatus() Returns Type Description Status GetTrailers() Gets the call trailing metadata if the call has already finished. Throws InvalidOperationException otherwise. Declaration public Metadata GetTrailers() Returns Type Description Metadata"
  },
  "api/Grpc.Core.RpcException.html": {
    "href": "api/Grpc.Core.RpcException.html",
    "title": "Class RpcException | gRPC for .NET",
    "keywords": "Class RpcException Thrown when remote procedure call fails. Every RpcException is associated with a resulting Status of the call. Inheritance Exception RpcException Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class RpcException : Exception Constructors RpcException(Status) Creates a new RpcException associated with given status. Declaration public RpcException(Status status) Parameters Type Name Description Status status Resulting status of a call. RpcException(Status, Metadata) Creates a new RpcException associated with given status and trailing response metadata. Declaration public RpcException(Status status, Metadata trailers) Parameters Type Name Description Status status Resulting status of a call. Metadata trailers Response trailing metadata. RpcException(Status, Metadata, String) Creates a new RpcException associated with given status, message and trailing response metadata. Declaration public RpcException(Status status, Metadata trailers, string message) Parameters Type Name Description Status status Resulting status of a call. Metadata trailers Response trailing metadata. System.String message The exception message. RpcException(Status, String) Creates a new RpcException associated with given status and message. Declaration public RpcException(Status status, string message) Parameters Type Name Description Status status Resulting status of a call. System.String message The exception message. Properties Status Resulting status of the call. Declaration public Status Status { get; } Property Value Type Description Status StatusCode Returns the status code of the call, as a convenient alternative to StatusCode . Declaration public StatusCode StatusCode { get; } Property Value Type Description StatusCode Trailers Gets the call trailing metadata. Trailers only have meaningful content for client-side calls (in which case they represent the trailing metadata sent by the server when closing the call). Instances of RpcException thrown by the server-side part of the stack will have trailers always set to empty. Declaration public Metadata Trailers { get; } Property Value Type Description Metadata"
  },
  "api/Grpc.Core.KeyCertificatePair.html": {
    "href": "api/Grpc.Core.KeyCertificatePair.html",
    "title": "Class KeyCertificatePair | gRPC for .NET",
    "keywords": "Class KeyCertificatePair Key certificate pair (in PEM encoding). Inheritance System.Object KeyCertificatePair Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public sealed class KeyCertificatePair : object Constructors KeyCertificatePair(String, String) Creates a new certificate chain - private key pair. Declaration public KeyCertificatePair(string certificateChain, string privateKey) Parameters Type Name Description System.String certificateChain PEM encoded certificate chain. System.String privateKey PEM encoded private key. Properties CertificateChain PEM encoded certificate chain. Declaration public string CertificateChain { get; } Property Value Type Description System.String PrivateKey PEM encoded private key. Declaration public string PrivateKey { get; } Property Value Type Description System.String"
  },
  "api/Grpc.AspNetCore.Server.Model.DuplexStreamingServerMethod-3.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.DuplexStreamingServerMethod-3.html",
    "title": "Delegate DuplexStreamingServerMethod<TService, TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate DuplexStreamingServerMethod<TService, TRequest, TResponse> Server-side handler for a duplex streaming call. Namespace : Grpc.AspNetCore.Server.Model Assembly : Grpc.AspNetCore.Server.dll Syntax public delegate Task DuplexStreamingServerMethod<TService, TRequest, TResponse>(TService service, IAsyncStreamReader<TRequest> input, IServerStreamWriter<TResponse> output, ServerCallContext serverCallContext); Parameters Type Name Description TService service The service instance. IAsyncStreamReader <TRequest> input A that is used to read a stream of request messages. IServerStreamWriter <TResponse> output A that is used to write a stream of response messages. ServerCallContext serverCallContext The for the call. Returns Type Description Task A task that represents the completion of the call. Type Parameters Name Description TService Service type for this method. TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Microsoft.AspNetCore.Builder.GrpcEndpointRouteBuilderExtensions.html": {
    "href": "api/Microsoft.AspNetCore.Builder.GrpcEndpointRouteBuilderExtensions.html",
    "title": "Class GrpcEndpointRouteBuilderExtensions | gRPC for .NET",
    "keywords": "Class GrpcEndpointRouteBuilderExtensions Provides extension methods for to add gRPC service endpoints. Inheritance System.Object GrpcEndpointRouteBuilderExtensions Namespace : Microsoft.AspNetCore.Builder Assembly : Grpc.AspNetCore.Server.dll Syntax public static class GrpcEndpointRouteBuilderExtensions : object Methods MapGrpcService<TService>(IEndpointRouteBuilder) Maps incoming requests to the specified TService type. Declaration public static GrpcServiceEndpointConventionBuilder MapGrpcService<TService>(this IEndpointRouteBuilder builder) where TService : class Parameters Type Name Description IEndpointRouteBuilder builder The to add the route to. Returns Type Description GrpcServiceEndpointConventionBuilder A GrpcServiceEndpointConventionBuilder for endpoints associated with the service. Type Parameters Name Description TService The service type to map requests to."
  },
  "api/Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation-2.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation-2.html",
    "title": "Delegate Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> Represents a continuation for intercepting simple asynchronous invocations. A delegate of this type is passed to the AsyncUnaryCall method when an outgoing invocation is being intercepted and calling the delegate will invoke the next interceptor in the chain, or the underlying call invoker if called from the last interceptor. The interceptor is allowed to call it zero, one, or multiple times, passing it the appropriate request value and context as it sees fit. Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public delegate AsyncUnaryCall<TResponse> AsyncUnaryCallContinuation<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request The request value to continue the invocation with. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> instance to pass to the next step in the invocation process. Returns Type Description AsyncUnaryCall <TResponse> An instance of AsyncUnaryCall<TResponse> representing an asynchronous invocation of a unary RPC. The interceptor can choose to return the same object returned from the continuation delegate or an arbitrarily constructed instance as it sees fit. Type Parameters Name Description TRequest Request message type for this invocation. TResponse Response message type for this invocation."
  },
  "api/Grpc.Core.IServerStreamWriter-1.html": {
    "href": "api/Grpc.Core.IServerStreamWriter-1.html",
    "title": "Interface IServerStreamWriter<T> | gRPC for .NET",
    "keywords": "Interface IServerStreamWriter<T> A writable stream of messages that is used in server-side handlers. Inherited Members IAsyncStreamWriter<T>.WriteAsync(T) IAsyncStreamWriter<T>.WriteOptions Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IServerStreamWriter<T> : IAsyncStreamWriter<T> Type Parameters Name Description T"
  },
  "api/Grpc.Core.UnaryServerMethod-2.html": {
    "href": "api/Grpc.Core.UnaryServerMethod-2.html",
    "title": "Delegate UnaryServerMethod<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate UnaryServerMethod<TRequest, TResponse> Server-side handler for unary call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task<TResponse> UnaryServerMethod<TRequest, TResponse>(TRequest request, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request ServerCallContext context Returns Type Description Task <TResponse> Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.ServiceBinderBase.html": {
    "href": "api/Grpc.Core.ServiceBinderBase.html",
    "title": "Class ServiceBinderBase | gRPC for .NET",
    "keywords": "Class ServiceBinderBase Allows binding server-side method implementations in alternative serving stacks. Instances of this class are usually populated by the BindService method that is part of the autogenerated code for a protocol buffers service definition. Inheritance System.Object ServiceBinderBase Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class ServiceBinderBase : object Methods AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ClientStreamingServerMethod<TRequest, TResponse>) Adds a definition for a client streaming method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ClientStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ClientStreamingServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, DuplexStreamingServerMethod<TRequest, TResponse>) Adds a definition for a bidirectional streaming method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, DuplexStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. DuplexStreamingServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, ServerStreamingServerMethod<TRequest, TResponse>) Adds a definition for a server streaming method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, ServerStreamingServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. ServerStreamingServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class. AddMethod<TRequest, TResponse>(Method<TRequest, TResponse>, UnaryServerMethod<TRequest, TResponse>) Adds a definition for a single request - single response method. Declaration public virtual void AddMethod<TRequest, TResponse>(Method<TRequest, TResponse> method, UnaryServerMethod<TRequest, TResponse> handler) where TRequest : class where TResponse : class Parameters Type Name Description Method <TRequest, TResponse> method The method. UnaryServerMethod <TRequest, TResponse> handler The method handler. Type Parameters Name Description TRequest The request message class. TResponse The response message class."
  },
  "api/Grpc.Core.MethodType.html": {
    "href": "api/Grpc.Core.MethodType.html",
    "title": "Enum MethodType | gRPC for .NET",
    "keywords": "Enum MethodType Method types supported by gRPC. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public enum MethodType : int Fields Name Description ClientStreaming Stream of request sent from client, single response received from server. DuplexStreaming Both server and client can stream arbitrary number of requests and responses simultaneously. ServerStreaming Single request sent from client, stream of responses received from server. Unary Single request sent from client, single response received from server."
  },
  "api/Grpc.Core.Interceptors.Interceptor.html": {
    "href": "api/Grpc.Core.Interceptors.Interceptor.html",
    "title": "Class Interceptor | gRPC for .NET",
    "keywords": "Class Interceptor Serves as the base class for gRPC interceptors. Inheritance System.Object Interceptor Namespace : Grpc.Core.Interceptors Assembly : Grpc.Core.Api.dll Syntax public abstract class Interceptor : object Methods AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a client streaming call. Declaration public virtual AsyncClientStreamingCall<TRequest, TResponse> AsyncClientStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncClientStreamingCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncClientStreamingCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given context argument, or substitute as it sees fit. Returns Type Description AsyncClientStreamingCall <TRequest, TResponse> An instance of AsyncClientStreamingCall<TRequest, TResponse> representing an asynchronous client-streaming invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a duplex streaming call. Declaration public virtual AsyncDuplexStreamingCall<TRequest, TResponse> AsyncDuplexStreamingCall<TRequest, TResponse>(ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncDuplexStreamingCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncDuplexStreamingCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given context argument, or substitute as it sees fit. Returns Type Description AsyncDuplexStreamingCall <TRequest, TResponse> An instance of AsyncDuplexStreamingCall<TRequest, TResponse> representing an asynchronous duplex-streaming invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse AsyncServerStreamingCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a streaming remote call. Declaration public virtual AsyncServerStreamingCall<TResponse> AsyncServerStreamingCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncServerStreamingCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request message of the invocation. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncServerStreamingCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given request value and context arguments, or substitute them as it sees fit. Returns Type Description AsyncServerStreamingCall <TResponse> An instance of AsyncServerStreamingCall<TResponse> representing an asynchronous server-streaming invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse AsyncUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse>) Intercepts an asynchronous invocation of a simple remote call. Declaration public virtual AsyncUnaryCall<TResponse> AsyncUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.AsyncUnaryCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request message of the invocation. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.AsyncUnaryCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given request value and context arguments, or substitute them as it sees fit. Returns Type Description AsyncUnaryCall <TResponse> An instance of AsyncUnaryCall<TResponse> representing an asynchronous unary invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or construct its own substitute as it sees fit. Type Parameters Name Description TRequest TResponse BlockingUnaryCall<TRequest, TResponse>(TRequest, ClientInterceptorContext<TRequest, TResponse>, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse>) Intercepts a blocking invocation of a simple remote call. Declaration public virtual TResponse BlockingUnaryCall<TRequest, TResponse>(TRequest request, ClientInterceptorContext<TRequest, TResponse> context, Interceptor.BlockingUnaryCallContinuation<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request message of the invocation. ClientInterceptorContext <TRequest, TResponse> context The ClientInterceptorContext<TRequest, TResponse> associated with the current invocation. Interceptor.BlockingUnaryCallContinuation <TRequest, TResponse> continuation The callback that continues the invocation process. This can be invoked zero or more times by the interceptor. The interceptor can invoke the continuation passing the given request value and context arguments, or substitute them as it sees fit. Returns Type Description TResponse The response message of the current invocation. The interceptor can simply return the return value of the continuation delegate passed to it intact, or an arbitrary value as it sees fit. Type Parameters Name Description TRequest TResponse ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, ServerCallContext, ClientStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting client streaming call. Declaration public virtual Task<TResponse> ClientStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, ServerCallContext context, ClientStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream The request stream of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. ClientStreamingServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and return the response value of the RPC. The interceptor can choose to call it zero or more times at its discretion. Returns Type Description Task <TResponse> A future representing the response value of the RPC. The interceptor can simply return the return value from the continuation intact, or an arbitrary response value as it sees fit. The interceptor has the ability to wrap or substitute the request stream when calling the continuation. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest>, IServerStreamWriter<TResponse>, ServerCallContext, DuplexStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting bidirectional streaming calls. Declaration public virtual Task DuplexStreamingServerHandler<TRequest, TResponse>(IAsyncStreamReader<TRequest> requestStream, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, DuplexStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description IAsyncStreamReader <TRequest> requestStream The request stream of the incoming invocation. IServerStreamWriter <TResponse> responseStream The response stream of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. DuplexStreamingServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and the interceptor can choose to call it zero or more times at its discretion. The interceptor has the ability to wrap or substitute the request and response streams when calling the continuation. Returns Type Description Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. ServerStreamingServerHandler<TRequest, TResponse>(TRequest, IServerStreamWriter<TResponse>, ServerCallContext, ServerStreamingServerMethod<TRequest, TResponse>) Server-side handler for intercepting server streaming call. Declaration public virtual Task ServerStreamingServerHandler<TRequest, TResponse>(TRequest request, IServerStreamWriter<TResponse> responseStream, ServerCallContext context, ServerStreamingServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request value of the incoming invocation. IServerStreamWriter <TResponse> responseStream The response stream of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. ServerStreamingServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and the interceptor can choose to call it zero or more times at its discretion. The interceptor has the ability to wrap or substitute the request value and the response stream when calling the continuation. Returns Type Description Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method. UnaryServerHandler<TRequest, TResponse>(TRequest, ServerCallContext, UnaryServerMethod<TRequest, TResponse>) Server-side handler for intercepting and incoming unary call. Declaration public virtual Task<TResponse> UnaryServerHandler<TRequest, TResponse>(TRequest request, ServerCallContext context, UnaryServerMethod<TRequest, TResponse> continuation) where TRequest : class where TResponse : class Parameters Type Name Description TRequest request The request value of the incoming invocation. ServerCallContext context An instance of ServerCallContext representing the context of the invocation. UnaryServerMethod <TRequest, TResponse> continuation A delegate that asynchronously proceeds with the invocation, calling the next interceptor in the chain, or the service request handler, in case of the last interceptor and return the response value of the RPC. The interceptor can choose to call it zero or more times at its discretion. Returns Type Description Task <TResponse> A future representing the response value of the RPC. The interceptor can simply return the return value from the continuation intact, or an arbitrary response value as it sees fit. Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.ServerServiceDefinition.html": {
    "href": "api/Grpc.Core.ServerServiceDefinition.html",
    "title": "Class ServerServiceDefinition | gRPC for .NET",
    "keywords": "Class ServerServiceDefinition Stores mapping of methods to server call handlers. Normally, the ServerServiceDefinition objects will be created by the BindService factory method that is part of the autogenerated code for a protocol buffers service definition. Inheritance System.Object ServerServiceDefinition Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class ServerServiceDefinition : object Methods CreateBuilder() Creates a new builder object for ServerServiceDefinition . Declaration public static ServerServiceDefinition.Builder CreateBuilder() Returns Type Description ServerServiceDefinition.Builder The builder object."
  },
  "api/Grpc.Core.ChannelBase.html": {
    "href": "api/Grpc.Core.ChannelBase.html",
    "title": "Class ChannelBase | gRPC for .NET",
    "keywords": "Class ChannelBase Base class for gRPC channel. Channels are an abstraction of long-lived connections to remote servers. Inheritance System.Object ChannelBase Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ChannelBase : object Constructors ChannelBase(String) Initializes a new instance of ChannelBase class that connects to a specific host. Declaration protected ChannelBase(string target) Parameters Type Name Description System.String target Target of the channel. Properties Target The original target used to create the channel. Declaration public string Target { get; } Property Value Type Description System.String Methods CreateCallInvoker() Create a new CallInvoker for the channel. Declaration public abstract CallInvoker CreateCallInvoker() Returns Type Description CallInvoker A new CallInvoker . Extension Methods ChannelExtensions.Intercept(ChannelBase, Interceptor) ChannelExtensions.Intercept(ChannelBase, Interceptor[]) ChannelExtensions.Intercept(ChannelBase, Func<Metadata, Metadata>)"
  },
  "api/Grpc.Core.ClientBase.ClientBaseConfiguration.html": {
    "href": "api/Grpc.Core.ClientBase.ClientBaseConfiguration.html",
    "title": "Class ClientBase.ClientBaseConfiguration | gRPC for .NET",
    "keywords": "Class ClientBase.ClientBaseConfiguration Represents configuration of ClientBase. The class itself is visible to subclasses, but contents are marked as internal to make the instances opaque. The verbose name of this class was chosen to make name clash in generated code less likely. Inheritance System.Object ClientBase.ClientBaseConfiguration Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax protected class ClientBaseConfiguration : object"
  },
  "api/Grpc.Core.BindServiceMethodAttribute.html": {
    "href": "api/Grpc.Core.BindServiceMethodAttribute.html",
    "title": "Class BindServiceMethodAttribute | gRPC for .NET",
    "keywords": "Class BindServiceMethodAttribute Specifies the location of the service bind method for a gRPC service. The bind method is typically generated code and is used to register a service's methods with the server on startup. The bind method signature takes a ServiceBinderBase and an optional instance of the service base class, e.g. static void BindService(ServiceBinderBase, GreeterService) . Inheritance Attribute BindServiceMethodAttribute Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class BindServiceMethodAttribute : Attribute Constructors BindServiceMethodAttribute(Type, String) Initializes a new instance of the BindServiceMethodAttribute class. Declaration public BindServiceMethodAttribute(Type bindType, string bindMethodName) Parameters Type Name Description Type bindType The type the service bind method is defined on. System.String bindMethodName The name of the service bind method. Properties BindMethodName Gets the name of the service bind method. Declaration public string BindMethodName { get; } Property Value Type Description System.String BindType Gets the type the service bind method is defined on. Declaration public Type BindType { get; } Property Value Type Description Type"
  },
  "api/Grpc.AspNetCore.Server.Model.ClientStreamingServerMethod-3.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.ClientStreamingServerMethod-3.html",
    "title": "Delegate ClientStreamingServerMethod<TService, TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate ClientStreamingServerMethod<TService, TRequest, TResponse> Server-side handler for a client streaming call. Namespace : Grpc.AspNetCore.Server.Model Assembly : Grpc.AspNetCore.Server.dll Syntax public delegate Task<TResponse> ClientStreamingServerMethod<TService, TRequest, TResponse>(TService service, IAsyncStreamReader<TRequest> stream, ServerCallContext serverCallContext); Parameters Type Name Description TService service The service instance. IAsyncStreamReader <TRequest> stream A that is used to read a stream of request messages. ServerCallContext serverCallContext The for the call. Returns Type Description Task <TResponse> A task that represents the completion of the call. The property returns a TResponse for the call response. Type Parameters Name Description TService Service type for this method. TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.IAsyncStreamReader-1.html": {
    "href": "api/Grpc.Core.IAsyncStreamReader-1.html",
    "title": "Interface IAsyncStreamReader<T> | gRPC for .NET",
    "keywords": "Interface IAsyncStreamReader<T> A stream of messages to be read. Messages can be awaited await reader.MoveNext() , that returns true if there is a message available and false if there are no more messages (i.e. the stream has been closed). On the client side, the last invocation of MoveNext() either returns false if the call has finished successfully or throws RpcException if call finished with an error. Once the call finishes, subsequent invocations of MoveNext() will continue yielding the same result (returning false or throwing an exception). On the server side, MoveNext() does not throw exceptions. In case of a failure, the request stream will appear to be finished ( MoveNext will return false ) and the CancellationToken associated with the call will be cancelled to signal the failure. MoveNext() operations can be cancelled via a cancellation token. Cancelling an individual read operation has the same effect as cancelling the entire call (which will also result in the read operation returning prematurely), but the per-read cancellation tokens passed to MoveNext() only result in cancelling the call if the read operation haven't finished yet. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public interface IAsyncStreamReader<T> Type Parameters Name Description T The message type. Properties Current Gets the current element in the iteration. Declaration T Current { get; } Property Value Type Description T Methods MoveNext(CancellationToken) Advances the reader to the next element in the sequence, returning the result asynchronously. Declaration Task<bool> MoveNext(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Cancellation token that can be used to cancel the operation. Returns Type Description Task < System.Boolean > Task containing the result of the operation: true if the reader was successfully advanced to the next element; false if the reader has passed the end of the sequence."
  },
  "api/Grpc.Core.Utils.GrpcPreconditions.html": {
    "href": "api/Grpc.Core.Utils.GrpcPreconditions.html",
    "title": "Class GrpcPreconditions | gRPC for .NET",
    "keywords": "Class GrpcPreconditions Utility methods to simplify checking preconditions in the code. Inheritance System.Object GrpcPreconditions Namespace : Grpc.Core.Utils Assembly : Grpc.Core.Api.dll Syntax public static class GrpcPreconditions : object Methods CheckArgument(Boolean) Throws if condition is false. Declaration public static void CheckArgument(bool condition) Parameters Type Name Description System.Boolean condition The condition. CheckArgument(Boolean, String) Throws with given message if condition is false. Declaration public static void CheckArgument(bool condition, string errorMessage) Parameters Type Name Description System.Boolean condition The condition. System.String errorMessage The error message. CheckNotNull<T>(T) Throws if reference is null. Declaration public static T CheckNotNull<T>(T reference) Parameters Type Name Description T reference The reference. Returns Type Description T Type Parameters Name Description T CheckNotNull<T>(T, String) Throws if reference is null. Declaration public static T CheckNotNull<T>(T reference, string paramName) Parameters Type Name Description T reference The reference. System.String paramName The parameter name. Returns Type Description T Type Parameters Name Description T CheckState(Boolean) Throws if condition is false. Declaration public static void CheckState(bool condition) Parameters Type Name Description System.Boolean condition The condition. CheckState(Boolean, String) Throws with given message if condition is false. Declaration public static void CheckState(bool condition, string errorMessage) Parameters Type Name Description System.Boolean condition The condition. System.String errorMessage The error message."
  },
  "api/Grpc.Net.ClientFactory.GrpcClientFactoryOptions.html": {
    "href": "api/Grpc.Net.ClientFactory.GrpcClientFactoryOptions.html",
    "title": "Class GrpcClientFactoryOptions | gRPC for .NET",
    "keywords": "Class GrpcClientFactoryOptions Options used to configure a gRPC client. Inheritance System.Object GrpcClientFactoryOptions Namespace : Grpc.Net.ClientFactory Assembly : Grpc.Net.ClientFactory.dll Syntax public class GrpcClientFactoryOptions : object Properties Address The address to use when making gRPC calls. Declaration public Uri? Address { get; set; } Property Value Type Description System.Nullable < Uri > ChannelOptionsActions Gets a list of operations used to configure a GrpcChannelOptions . Declaration public IList<Action<GrpcChannelOptions>> ChannelOptionsActions { get; } Property Value Type Description IList < Action < GrpcChannelOptions >> Interceptors Gets a list of instances used to configure a gRPC client pipeline. Declaration public IList<Interceptor> Interceptors { get; } Property Value Type Description IList < Interceptor >"
  },
  "api/Grpc.Core.LiteClientBase.html": {
    "href": "api/Grpc.Core.LiteClientBase.html",
    "title": "Class LiteClientBase | gRPC for .NET",
    "keywords": "Class LiteClientBase Base class for lightweight client-side stubs. All calls are invoked via a CallInvoker . Lite client stubs have no configuration knobs, all configuration is provided by decorating the call invoker. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object LiteClientBase Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class LiteClientBase : object Constructors LiteClientBase() Initializes a new instance of LiteClientBase class that throws NotImplementedException upon invocation of any RPC. This constructor is only provided to allow creation of test doubles for client classes (e.g. mocking requires a parameterless constructor). Declaration protected LiteClientBase() LiteClientBase(CallInvoker) Initializes a new instance of ClientBase class. Declaration public LiteClientBase(CallInvoker callInvoker) Parameters Type Name Description CallInvoker callInvoker The CallInvoker for remote call invocation. Properties CallInvoker Gets the call invoker. Declaration protected CallInvoker CallInvoker { get; } Property Value Type Description CallInvoker"
  },
  "api/Grpc.Core.CallOptions.html": {
    "href": "api/Grpc.Core.CallOptions.html",
    "title": "Struct CallOptions | gRPC for .NET",
    "keywords": "Struct CallOptions Options for calls made by client. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public struct CallOptions Constructors CallOptions(Metadata, Nullable<DateTime>, CancellationToken, WriteOptions, ContextPropagationToken, CallCredentials) Creates a new instance of CallOptions struct. Declaration public CallOptions(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = null, WriteOptions writeOptions = null, ContextPropagationToken propagationToken = null, CallCredentials credentials = null) Parameters Type Name Description Metadata headers Headers to be sent with the call. System.Nullable < DateTime > deadline Deadline for the call to finish. null means no deadline. CancellationToken cancellationToken Can be used to request cancellation of the call. WriteOptions writeOptions Write options that will be used for this call. ContextPropagationToken propagationToken Context propagation token obtained from ServerCallContext . CallCredentials credentials Credentials to use for this call. Properties CancellationToken Token that can be used for cancelling the call on the client side. Cancelling the token will request cancellation of the remote call. Best effort will be made to deliver the cancellation notification to the server and interaction of the call with the server side will be terminated. Unless the call finishes before the cancellation could happen (there is an inherent race), the call will finish with StatusCode.Cancelled status. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken Credentials Credentials to use for this call. Declaration public CallCredentials Credentials { get; } Property Value Type Description CallCredentials Deadline Call deadline. Declaration public DateTime? Deadline { get; } Property Value Type Description System.Nullable < DateTime > Headers Headers to send at the beginning of the call. Declaration public Metadata Headers { get; } Property Value Type Description Metadata IsWaitForReady If true and and channel is in ChannelState.TransientFailure , the call will attempt waiting for the channel to recover instead of failing immediately (which is the default \"FailFast\" semantics). Note: experimental API that can change or be removed without any prior notice. Declaration public bool IsWaitForReady { get; } Property Value Type Description System.Boolean PropagationToken Token for propagating parent call context. Declaration public ContextPropagationToken PropagationToken { get; } Property Value Type Description ContextPropagationToken WriteOptions Write options that will be used for this call. Declaration public WriteOptions WriteOptions { get; } Property Value Type Description WriteOptions Methods WithCancellationToken(CancellationToken) Returns new instance of CallOptions with CancellationToken set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithCancellationToken(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description CallOptions WithCredentials(CallCredentials) Returns new instance of CallOptions with Credentials set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithCredentials(CallCredentials credentials) Parameters Type Name Description CallCredentials credentials The call credentials. Returns Type Description CallOptions WithDeadline(DateTime) Returns new instance of CallOptions with Deadline set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithDeadline(DateTime deadline) Parameters Type Name Description DateTime deadline The deadline. Returns Type Description CallOptions WithHeaders(Metadata) Returns new instance of CallOptions with Headers set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithHeaders(Metadata headers) Parameters Type Name Description Metadata headers The headers. Returns Type Description CallOptions WithPropagationToken(ContextPropagationToken) Returns new instance of CallOptions with PropagationToken set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithPropagationToken(ContextPropagationToken propagationToken) Parameters Type Name Description ContextPropagationToken propagationToken The context propagation token. Returns Type Description CallOptions WithWaitForReady(Boolean) Returns new instance of CallOptions with \"WaitForReady\" semantics enabled/disabled. IsWaitForReady . Note: experimental API that can change or be removed without any prior notice. Declaration public CallOptions WithWaitForReady(bool waitForReady = true) Parameters Type Name Description System.Boolean waitForReady Returns Type Description CallOptions WithWriteOptions(WriteOptions) Returns new instance of CallOptions with WriteOptions set to the value provided. Values of all other fields are preserved. Declaration public CallOptions WithWriteOptions(WriteOptions writeOptions) Parameters Type Name Description WriteOptions writeOptions The write options. Returns Type Description CallOptions"
  },
  "api/Grpc.Core.AuthContext.html": {
    "href": "api/Grpc.Core.AuthContext.html",
    "title": "Class AuthContext | gRPC for .NET",
    "keywords": "Class AuthContext Authentication context for a call. AuthContext is the only reliable source of truth when it comes to authenticating calls. Using any other call/context properties for authentication purposes is wrong and inherently unsafe. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object AuthContext Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class AuthContext : object Constructors AuthContext(String, Dictionary<String, List<AuthProperty>>) Initializes a new instance of the AuthContext class. Declaration public AuthContext(string peerIdentityPropertyName, Dictionary<string, List<AuthProperty>> properties) Parameters Type Name Description System.String peerIdentityPropertyName Peer identity property name. Dictionary < System.String , List < AuthProperty >> properties Multimap of auth properties by name. Properties IsPeerAuthenticated Returns true if the peer is authenticated. Declaration public bool IsPeerAuthenticated { get; } Property Value Type Description System.Boolean PeerIdentity Gets properties that represent the peer identity (there can be more than one). Returns an empty collection if the peer is not authenticated. Declaration public IEnumerable<AuthProperty> PeerIdentity { get; } Property Value Type Description IEnumerable < AuthProperty > PeerIdentityPropertyName Gets the name of the property that indicates the peer identity. Returns null if the peer is not authenticated. Declaration public string PeerIdentityPropertyName { get; } Property Value Type Description System.String Properties Gets the auth properties of this context. Declaration public IEnumerable<AuthProperty> Properties { get; } Property Value Type Description IEnumerable < AuthProperty > Methods FindPropertiesByName(String) Returns the auth properties with given name (there can be more than one). If no properties of given name exist, an empty collection will be returned. Declaration public IEnumerable<AuthProperty> FindPropertiesByName(string propertyName) Parameters Type Name Description System.String propertyName Returns Type Description IEnumerable < AuthProperty >"
  },
  "api/Grpc.Core.AuthProperty.html": {
    "href": "api/Grpc.Core.AuthProperty.html",
    "title": "Class AuthProperty | gRPC for .NET",
    "keywords": "Class AuthProperty A property of an AuthContext . Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object AuthProperty Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class AuthProperty : object Properties Name Gets the name of the property. Declaration public string Name { get; } Property Value Type Description System.String Value Gets the string value of the property. Declaration public string Value { get; } Property Value Type Description System.String ValueBytes Gets the binary value of the property. Declaration public byte[] ValueBytes { get; } Property Value Type Description System.Byte [] Methods Create(String, Byte[]) Creates an instance of AuthProperty . Declaration public static AuthProperty Create(string name, byte[] valueBytes) Parameters Type Name Description System.String name the name System.Byte [] valueBytes the binary value of the property Returns Type Description AuthProperty"
  },
  "api/Grpc.AspNetCore.Server.Model.ServerStreamingServerMethod-3.html": {
    "href": "api/Grpc.AspNetCore.Server.Model.ServerStreamingServerMethod-3.html",
    "title": "Delegate ServerStreamingServerMethod<TService, TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate ServerStreamingServerMethod<TService, TRequest, TResponse> Server-side handler for a server streaming call. Namespace : Grpc.AspNetCore.Server.Model Assembly : Grpc.AspNetCore.Server.dll Syntax public delegate Task ServerStreamingServerMethod<TService, TRequest, TResponse>(TService service, TRequest request, IServerStreamWriter<TResponse> stream, ServerCallContext serverCallContext); Parameters Type Name Description TService service The service instance. TRequest request The request message. IServerStreamWriter <TResponse> stream A that is used to write a stream of response messages. ServerCallContext serverCallContext The for the call. Returns Type Description Task A task that represents the completion of the call. Type Parameters Name Description TService Service type for this method. TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.AspNetCore.Server.GrpcServiceOptions-1.html": {
    "href": "api/Grpc.AspNetCore.Server.GrpcServiceOptions-1.html",
    "title": "Class GrpcServiceOptions<TService> | gRPC for .NET",
    "keywords": "Class GrpcServiceOptions<TService> Options used to configure the specified service type instances. These options override globally set options. Inheritance System.Object GrpcServiceOptions GrpcServiceOptions<TService> Inherited Members GrpcServiceOptions.MaxSendMessageSize GrpcServiceOptions.MaxReceiveMessageSize GrpcServiceOptions.EnableDetailedErrors GrpcServiceOptions.ResponseCompressionAlgorithm GrpcServiceOptions.ResponseCompressionLevel GrpcServiceOptions.CompressionProviders GrpcServiceOptions.Interceptors Namespace : Grpc.AspNetCore.Server Assembly : Grpc.AspNetCore.Server.dll Syntax public class GrpcServiceOptions<TService> : GrpcServiceOptions where TService : class Type Parameters Name Description TService The service type to configure."
  },
  "api/Grpc.Core.VerifyPeerContext.html": {
    "href": "api/Grpc.Core.VerifyPeerContext.html",
    "title": "Class VerifyPeerContext | gRPC for .NET",
    "keywords": "Class VerifyPeerContext Verification context for VerifyPeerCallback. Note: experimental API that can change or be removed without any prior notice. Inheritance System.Object VerifyPeerContext Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public class VerifyPeerContext : object Properties PeerPem The PEM encoded certificate of the peer. Declaration public string PeerPem { get; } Property Value Type Description System.String TargetName The target name of the peer. Declaration public string TargetName { get; } Property Value Type Description System.String"
  },
  "api/Grpc.Core.VerifyPeerCallback.html": {
    "href": "api/Grpc.Core.VerifyPeerCallback.html",
    "title": "Delegate VerifyPeerCallback | gRPC for .NET",
    "keywords": "Delegate VerifyPeerCallback Callback invoked with the expected targetHost and the peer's certificate. If false is returned by this callback then it is treated as a verification failure and the attempted connection will fail. Invocation of the callback is blocking, so any implementation should be light-weight. Note that the callback can potentially be invoked multiple times, concurrently from different threads (e.g. when multiple connections are being created for the same credentials). Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate bool VerifyPeerCallback(VerifyPeerContext context); Parameters Type Name Description VerifyPeerContext context The VerifyPeerContext associated with the callback Returns Type Description System.Boolean true if verification succeeded, false otherwise."
  },
  "api/Grpc.Core.ServerStreamingServerMethod-2.html": {
    "href": "api/Grpc.Core.ServerStreamingServerMethod-2.html",
    "title": "Delegate ServerStreamingServerMethod<TRequest, TResponse> | gRPC for .NET",
    "keywords": "Delegate ServerStreamingServerMethod<TRequest, TResponse> Server-side handler for server streaming call. Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task ServerStreamingServerMethod<TRequest, TResponse>(TRequest request, IServerStreamWriter<TResponse> responseStream, ServerCallContext context) where TRequest : class where TResponse : class; Parameters Type Name Description TRequest request IServerStreamWriter <TResponse> responseStream ServerCallContext context Returns Type Description Task Type Parameters Name Description TRequest Request message type for this method. TResponse Response message type for this method."
  },
  "api/Grpc.Core.ServerCallContext.html": {
    "href": "api/Grpc.Core.ServerCallContext.html",
    "title": "Class ServerCallContext | gRPC for .NET",
    "keywords": "Class ServerCallContext Context for a server-side call. Inheritance System.Object ServerCallContext Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public abstract class ServerCallContext : object Constructors ServerCallContext() Creates a new instance of ServerCallContext . Declaration protected ServerCallContext() Properties AuthContext Gets the AuthContext associated with this call. Note: Access to AuthContext is an experimental API that can change without any prior notice. Declaration public AuthContext AuthContext { get; } Property Value Type Description AuthContext AuthContextCore Provides implementation of a non-virtual public member. Declaration protected abstract AuthContext AuthContextCore { get; } Property Value Type Description AuthContext CancellationToken Cancellation token signals when call is cancelled. Declaration public CancellationToken CancellationToken { get; } Property Value Type Description CancellationToken CancellationTokenCore Provides implementation of a non-virtual public member. Declaration protected abstract CancellationToken CancellationTokenCore { get; } Property Value Type Description CancellationToken Deadline Deadline for this RPC. Declaration public DateTime Deadline { get; } Property Value Type Description DateTime DeadlineCore Provides implementation of a non-virtual public member. Declaration protected abstract DateTime DeadlineCore { get; } Property Value Type Description DateTime Host Name of host called in this RPC. Declaration public string Host { get; } Property Value Type Description System.String HostCore Provides implementation of a non-virtual public member. Declaration protected abstract string HostCore { get; } Property Value Type Description System.String Method Name of method called in this RPC. Declaration public string Method { get; } Property Value Type Description System.String MethodCore Provides implementation of a non-virtual public member. Declaration protected abstract string MethodCore { get; } Property Value Type Description System.String Peer Address of the remote endpoint in URI format. Declaration public string Peer { get; } Property Value Type Description System.String PeerCore Provides implementation of a non-virtual public member. Declaration protected abstract string PeerCore { get; } Property Value Type Description System.String RequestHeaders Initial metadata sent by client. Declaration public Metadata RequestHeaders { get; } Property Value Type Description Metadata RequestHeadersCore Provides implementation of a non-virtual public member. Declaration protected abstract Metadata RequestHeadersCore { get; } Property Value Type Description Metadata ResponseTrailers Trailers to send back to client after RPC finishes. Declaration public Metadata ResponseTrailers { get; } Property Value Type Description Metadata ResponseTrailersCore Provides implementation of a non-virtual public member. Declaration protected abstract Metadata ResponseTrailersCore { get; } Property Value Type Description Metadata Status Status to send back to client after RPC finishes. Declaration public Status Status { get; set; } Property Value Type Description Status StatusCore Provides implementation of a non-virtual public member. Declaration protected abstract Status StatusCore { get; set; } Property Value Type Description Status UserState Gets a dictionary that can be used by the various interceptors and handlers of this call to store arbitrary state. Declaration public IDictionary<object, object> UserState { get; } Property Value Type Description IDictionary < System.Object , System.Object > UserStateCore Provides implementation of a non-virtual public member. Declaration protected virtual IDictionary<object, object> UserStateCore { get; } Property Value Type Description IDictionary < System.Object , System.Object > WriteOptions Allows setting write options for the following write. For streaming response calls, this property is also exposed as on IServerStreamWriter for convenience. Both properties are backed by the same underlying value. Declaration public WriteOptions WriteOptions { get; set; } Property Value Type Description WriteOptions WriteOptionsCore Provides implementation of a non-virtual public member. Declaration protected abstract WriteOptions WriteOptionsCore { get; set; } Property Value Type Description WriteOptions Methods CreatePropagationToken(ContextPropagationOptions) Creates a propagation token to be used to propagate call context to a child call. Declaration public ContextPropagationToken CreatePropagationToken(ContextPropagationOptions options = null) Parameters Type Name Description ContextPropagationOptions options Returns Type Description ContextPropagationToken CreatePropagationTokenCore(ContextPropagationOptions) Provides implementation of a non-virtual public member. Declaration protected abstract ContextPropagationToken CreatePropagationTokenCore(ContextPropagationOptions options) Parameters Type Name Description ContextPropagationOptions options Returns Type Description ContextPropagationToken WriteResponseHeadersAsync(Metadata) Asynchronously sends response headers for the current call to the client. This method may only be invoked once for each call and needs to be invoked before any response messages are written. Writing the first response message implicitly sends empty response headers if WriteResponseHeadersAsync haven't been called yet. Declaration public Task WriteResponseHeadersAsync(Metadata responseHeaders) Parameters Type Name Description Metadata responseHeaders The response headers to send. Returns Type Description Task The task that finished once response headers have been written. WriteResponseHeadersAsyncCore(Metadata) Provides implementation of a non-virtual public member. Declaration protected abstract Task WriteResponseHeadersAsyncCore(Metadata responseHeaders) Parameters Type Name Description Metadata responseHeaders Returns Type Description Task"
  },
  "api/Grpc.Core.AsyncAuthInterceptor.html": {
    "href": "api/Grpc.Core.AsyncAuthInterceptor.html",
    "title": "Delegate AsyncAuthInterceptor | gRPC for .NET",
    "keywords": "Delegate AsyncAuthInterceptor Asynchronous authentication interceptor for CallCredentials . Namespace : Grpc.Core Assembly : Grpc.Core.Api.dll Syntax public delegate Task AsyncAuthInterceptor(AuthInterceptorContext context, Metadata metadata); Parameters Type Name Description AuthInterceptorContext context The interceptor context. Metadata metadata Metadata to populate with entries that will be added to outgoing call's headers. Returns Type Description Task"
  },
  "api/Microsoft.AspNetCore.Builder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.html",
    "title": "Namespace Microsoft.AspNetCore.Builder | gRPC for .NET",
    "keywords": "Namespace Microsoft.AspNetCore.Builder Classes GrpcEndpointRouteBuilderExtensions Provides extension methods for to add gRPC service endpoints. GrpcReflectionEndpointRouteBuilderExtensions Provides extension methods for to add gRPC service endpoints. GrpcServiceEndpointConventionBuilder Builds conventions that will be used for customization of gRPC service instances."
  },
  "api/Microsoft.AspNetCore.Builder.GrpcServiceEndpointConventionBuilder.html": {
    "href": "api/Microsoft.AspNetCore.Builder.GrpcServiceEndpointConventionBuilder.html",
    "title": "Class GrpcServiceEndpointConventionBuilder | gRPC for .NET",
    "keywords": "Class GrpcServiceEndpointConventionBuilder Builds conventions that will be used for customization of gRPC service instances. Inheritance IEndpointConventionBuilder GrpcServiceEndpointConventionBuilder Namespace : Microsoft.AspNetCore.Builder Assembly : Grpc.AspNetCore.Server.dll Syntax public sealed class GrpcServiceEndpointConventionBuilder : IEndpointConventionBuilder Methods Add(Action<EndpointBuilder>) Adds the specified convention to the builder. Conventions are used to customize instances. Declaration public void Add(Action<EndpointBuilder> convention) Parameters Type Name Description Action < EndpointBuilder > convention The convention to add to the builder."
  }
}